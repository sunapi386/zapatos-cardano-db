/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2022 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';
  import type * as c from 'zapatos/custom';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 104 }


  /* === schema: public === */

  /* --- enums --- */

  export type rewardtype = 'leader' | 'member' | 'refund' | 'reserves' | 'treasury';
  export namespace every {
    export type rewardtype = ['leader', 'member', 'refund', 'reserves', 'treasury'];
  }
  export type scriptpurposetype = 'cert' | 'mint' | 'reward' | 'spend';
  export namespace every {
    export type scriptpurposetype = ['cert', 'mint', 'reward', 'spend'];
  }
  export type scripttype = 'multisig' | 'plutus' | 'timelock';
  export namespace every {
    export type scripttype = ['multisig', 'plutus', 'timelock'];
  }
  export type syncstatetype = 'following' | 'lagging';
  export namespace every {
    export type syncstatetype = ['following', 'lagging'];
  }

  /* --- tables --- */

  /**
   * **ada_pots**
   * - Table in database
   */
  export namespace ada_pots {
    export type Table = 'ada_pots';
    export interface Selectable {
      /**
      * **ada_pots.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('ada_pots_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **ada_pots.slot_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    slot_no: c.PgUinteger;
      /**
      * **ada_pots.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    epoch_no: c.PgUinteger;
      /**
      * **ada_pots.treasury**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    treasury: c.PgLovelace;
      /**
      * **ada_pots.reserves**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    reserves: c.PgLovelace;
      /**
      * **ada_pots.rewards**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    rewards: c.PgLovelace;
      /**
      * **ada_pots.utxo**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    utxo: c.PgLovelace;
      /**
      * **ada_pots.deposits**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    deposits: c.PgLovelace;
      /**
      * **ada_pots.fees**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    fees: c.PgLovelace;
      /**
      * **ada_pots.block_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    block_id: db.Int8String;
    }
    export interface JSONSelectable {
      /**
      * **ada_pots.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('ada_pots_id_seq'::regclass)`
      */
    id: number;
      /**
      * **ada_pots.slot_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    slot_no: c.PgUinteger;
      /**
      * **ada_pots.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    epoch_no: c.PgUinteger;
      /**
      * **ada_pots.treasury**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    treasury: c.PgLovelace;
      /**
      * **ada_pots.reserves**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    reserves: c.PgLovelace;
      /**
      * **ada_pots.rewards**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    rewards: c.PgLovelace;
      /**
      * **ada_pots.utxo**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    utxo: c.PgLovelace;
      /**
      * **ada_pots.deposits**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    deposits: c.PgLovelace;
      /**
      * **ada_pots.fees**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    fees: c.PgLovelace;
      /**
      * **ada_pots.block_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    block_id: number;
    }
    export interface Whereable {
      /**
      * **ada_pots.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('ada_pots_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ada_pots.slot_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    slot_no?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ada_pots.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    epoch_no?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ada_pots.treasury**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    treasury?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ada_pots.reserves**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    reserves?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ada_pots.rewards**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    rewards?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ada_pots.utxo**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    utxo?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ada_pots.deposits**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    deposits?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ada_pots.fees**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    fees?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ada_pots.block_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    block_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **ada_pots.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('ada_pots_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **ada_pots.slot_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    slot_no: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment;
      /**
      * **ada_pots.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    epoch_no: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment;
      /**
      * **ada_pots.treasury**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    treasury: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment;
      /**
      * **ada_pots.reserves**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    reserves: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment;
      /**
      * **ada_pots.rewards**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    rewards: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment;
      /**
      * **ada_pots.utxo**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    utxo: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment;
      /**
      * **ada_pots.deposits**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    deposits: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment;
      /**
      * **ada_pots.fees**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    fees: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment;
      /**
      * **ada_pots.block_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    block_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **ada_pots.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('ada_pots_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **ada_pots.slot_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    slot_no?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment>;
      /**
      * **ada_pots.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    epoch_no?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment>;
      /**
      * **ada_pots.treasury**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    treasury?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment>;
      /**
      * **ada_pots.reserves**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    reserves?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment>;
      /**
      * **ada_pots.rewards**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    rewards?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment>;
      /**
      * **ada_pots.utxo**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    utxo?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment>;
      /**
      * **ada_pots.deposits**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    deposits?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment>;
      /**
      * **ada_pots.fees**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    fees?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment>;
      /**
      * **ada_pots.block_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    block_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'ada_pots_pkey' | 'unique_ada_pots';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **admin_user**
   * - Table in database
   */
  export namespace admin_user {
    export type Table = 'admin_user';
    export interface Selectable {
      /**
      * **admin_user.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('admin_user_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **admin_user.username**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    username: string;
      /**
      * **admin_user.password**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    password: string;
    }
    export interface JSONSelectable {
      /**
      * **admin_user.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('admin_user_id_seq'::regclass)`
      */
    id: number;
      /**
      * **admin_user.username**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    username: string;
      /**
      * **admin_user.password**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    password: string;
    }
    export interface Whereable {
      /**
      * **admin_user.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('admin_user_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **admin_user.username**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    username?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **admin_user.password**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    password?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **admin_user.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('admin_user_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **admin_user.username**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    username: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **admin_user.password**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    password: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **admin_user.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('admin_user_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **admin_user.username**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    username?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **admin_user.password**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    password?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'admin_user_pkey' | 'unique_admin_user';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **block**
   * - Table in database
   */
  export namespace block {
    export type Table = 'block';
    export interface Selectable {
      /**
      * **block.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('block_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **block.hash**
      * - `hash32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash: c.PgHash32type;
      /**
      * **block.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    epoch_no: c.PgUinteger | null;
      /**
      * **block.slot_no**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    slot_no: c.PgUinteger | null;
      /**
      * **block.epoch_slot_no**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    epoch_slot_no: c.PgUinteger | null;
      /**
      * **block.block_no**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    block_no: c.PgUinteger | null;
      /**
      * **block.previous_id**
      * - `int8` in database
      * - Nullable, no default
      */
    previous_id: db.Int8String | null;
      /**
      * **block.slot_leader_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    slot_leader_id: db.Int8String;
      /**
      * **block.size**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    size: c.PgUinteger;
      /**
      * **block.time**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
    time: Date;
      /**
      * **block.tx_count**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_count: db.Int8String;
      /**
      * **block.proto_major**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    proto_major: c.PgUinteger;
      /**
      * **block.proto_minor**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    proto_minor: c.PgUinteger;
      /**
      * **block.vrf_key**
      * - `varchar` in database
      * - Nullable, no default
      */
    vrf_key: string | null;
      /**
      * **block.op_cert**
      * - `hash32type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    op_cert: c.PgHash32type | null;
      /**
      * **block.op_cert_counter**
      * - `word63type` (base type: `int8`) in database
      * - Nullable, no default
      */
    op_cert_counter: c.PgWord63type | null;
    }
    export interface JSONSelectable {
      /**
      * **block.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('block_id_seq'::regclass)`
      */
    id: number;
      /**
      * **block.hash**
      * - `hash32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash: c.PgHash32type;
      /**
      * **block.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    epoch_no: c.PgUinteger | null;
      /**
      * **block.slot_no**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    slot_no: c.PgUinteger | null;
      /**
      * **block.epoch_slot_no**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    epoch_slot_no: c.PgUinteger | null;
      /**
      * **block.block_no**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    block_no: c.PgUinteger | null;
      /**
      * **block.previous_id**
      * - `int8` in database
      * - Nullable, no default
      */
    previous_id: number | null;
      /**
      * **block.slot_leader_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    slot_leader_id: number;
      /**
      * **block.size**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    size: c.PgUinteger;
      /**
      * **block.time**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
    time: db.TimestampString;
      /**
      * **block.tx_count**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_count: number;
      /**
      * **block.proto_major**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    proto_major: c.PgUinteger;
      /**
      * **block.proto_minor**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    proto_minor: c.PgUinteger;
      /**
      * **block.vrf_key**
      * - `varchar` in database
      * - Nullable, no default
      */
    vrf_key: string | null;
      /**
      * **block.op_cert**
      * - `hash32type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    op_cert: c.PgHash32type | null;
      /**
      * **block.op_cert_counter**
      * - `word63type` (base type: `int8`) in database
      * - Nullable, no default
      */
    op_cert_counter: c.PgWord63type | null;
    }
    export interface Whereable {
      /**
      * **block.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('block_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **block.hash**
      * - `hash32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash?: c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **block.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    epoch_no?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **block.slot_no**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    slot_no?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **block.epoch_slot_no**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    epoch_slot_no?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **block.block_no**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    block_no?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **block.previous_id**
      * - `int8` in database
      * - Nullable, no default
      */
    previous_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **block.slot_leader_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    slot_leader_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **block.size**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    size?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **block.time**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
    time?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **block.tx_count**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_count?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **block.proto_major**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    proto_major?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **block.proto_minor**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    proto_minor?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **block.vrf_key**
      * - `varchar` in database
      * - Nullable, no default
      */
    vrf_key?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **block.op_cert**
      * - `hash32type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    op_cert?: c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **block.op_cert_counter**
      * - `word63type` (base type: `int8`) in database
      * - Nullable, no default
      */
    op_cert_counter?: c.PgWord63type | db.Parameter<c.PgWord63type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgWord63type | db.Parameter<c.PgWord63type> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **block.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('block_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **block.hash**
      * - `hash32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash: c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment;
      /**
      * **block.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    epoch_no?: c.PgUinteger | db.Parameter<c.PgUinteger> | null | db.DefaultType | db.SQLFragment;
      /**
      * **block.slot_no**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    slot_no?: c.PgUinteger | db.Parameter<c.PgUinteger> | null | db.DefaultType | db.SQLFragment;
      /**
      * **block.epoch_slot_no**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    epoch_slot_no?: c.PgUinteger | db.Parameter<c.PgUinteger> | null | db.DefaultType | db.SQLFragment;
      /**
      * **block.block_no**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    block_no?: c.PgUinteger | db.Parameter<c.PgUinteger> | null | db.DefaultType | db.SQLFragment;
      /**
      * **block.previous_id**
      * - `int8` in database
      * - Nullable, no default
      */
    previous_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **block.slot_leader_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    slot_leader_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **block.size**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    size: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment;
      /**
      * **block.time**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
    time: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment;
      /**
      * **block.tx_count**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_count: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **block.proto_major**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    proto_major: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment;
      /**
      * **block.proto_minor**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    proto_minor: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment;
      /**
      * **block.vrf_key**
      * - `varchar` in database
      * - Nullable, no default
      */
    vrf_key?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **block.op_cert**
      * - `hash32type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    op_cert?: c.PgHash32type | db.Parameter<c.PgHash32type> | null | db.DefaultType | db.SQLFragment;
      /**
      * **block.op_cert_counter**
      * - `word63type` (base type: `int8`) in database
      * - Nullable, no default
      */
    op_cert_counter?: c.PgWord63type | db.Parameter<c.PgWord63type> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **block.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('block_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **block.hash**
      * - `hash32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash?: c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment | db.SQLFragment<any, c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment>;
      /**
      * **block.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    epoch_no?: c.PgUinteger | db.Parameter<c.PgUinteger> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **block.slot_no**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    slot_no?: c.PgUinteger | db.Parameter<c.PgUinteger> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **block.epoch_slot_no**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    epoch_slot_no?: c.PgUinteger | db.Parameter<c.PgUinteger> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **block.block_no**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    block_no?: c.PgUinteger | db.Parameter<c.PgUinteger> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **block.previous_id**
      * - `int8` in database
      * - Nullable, no default
      */
    previous_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **block.slot_leader_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    slot_leader_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **block.size**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    size?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment>;
      /**
      * **block.time**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
    time?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment>;
      /**
      * **block.tx_count**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_count?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **block.proto_major**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    proto_major?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment>;
      /**
      * **block.proto_minor**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    proto_minor?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment>;
      /**
      * **block.vrf_key**
      * - `varchar` in database
      * - Nullable, no default
      */
    vrf_key?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **block.op_cert**
      * - `hash32type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    op_cert?: c.PgHash32type | db.Parameter<c.PgHash32type> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgHash32type | db.Parameter<c.PgHash32type> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **block.op_cert_counter**
      * - `word63type` (base type: `int8`) in database
      * - Nullable, no default
      */
    op_cert_counter?: c.PgWord63type | db.Parameter<c.PgWord63type> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgWord63type | db.Parameter<c.PgWord63type> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'block_pkey' | 'unique_block';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **collateral_tx_in**
   * - Table in database
   */
  export namespace collateral_tx_in {
    export type Table = 'collateral_tx_in';
    export interface Selectable {
      /**
      * **collateral_tx_in.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('collateral_tx_in_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **collateral_tx_in.tx_in_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_in_id: db.Int8String;
      /**
      * **collateral_tx_in.tx_out_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_out_id: db.Int8String;
      /**
      * **collateral_tx_in.tx_out_index**
      * - `txindex` (base type: `int2`) in database
      * - `NOT NULL`, no default
      */
    tx_out_index: c.PgTxindex;
    }
    export interface JSONSelectable {
      /**
      * **collateral_tx_in.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('collateral_tx_in_id_seq'::regclass)`
      */
    id: number;
      /**
      * **collateral_tx_in.tx_in_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_in_id: number;
      /**
      * **collateral_tx_in.tx_out_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_out_id: number;
      /**
      * **collateral_tx_in.tx_out_index**
      * - `txindex` (base type: `int2`) in database
      * - `NOT NULL`, no default
      */
    tx_out_index: c.PgTxindex;
    }
    export interface Whereable {
      /**
      * **collateral_tx_in.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('collateral_tx_in_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **collateral_tx_in.tx_in_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_in_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **collateral_tx_in.tx_out_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_out_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **collateral_tx_in.tx_out_index**
      * - `txindex` (base type: `int2`) in database
      * - `NOT NULL`, no default
      */
    tx_out_index?: c.PgTxindex | db.Parameter<c.PgTxindex> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgTxindex | db.Parameter<c.PgTxindex> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **collateral_tx_in.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('collateral_tx_in_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **collateral_tx_in.tx_in_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_in_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **collateral_tx_in.tx_out_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_out_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **collateral_tx_in.tx_out_index**
      * - `txindex` (base type: `int2`) in database
      * - `NOT NULL`, no default
      */
    tx_out_index: c.PgTxindex | db.Parameter<c.PgTxindex> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **collateral_tx_in.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('collateral_tx_in_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **collateral_tx_in.tx_in_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_in_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **collateral_tx_in.tx_out_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_out_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **collateral_tx_in.tx_out_index**
      * - `txindex` (base type: `int2`) in database
      * - `NOT NULL`, no default
      */
    tx_out_index?: c.PgTxindex | db.Parameter<c.PgTxindex> | db.SQLFragment | db.SQLFragment<any, c.PgTxindex | db.Parameter<c.PgTxindex> | db.SQLFragment>;
    }
    export type UniqueIndex = 'collateral_tx_in_pkey' | 'unique_col_txin';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **cost_model**
   * - Table in database
   */
  export namespace cost_model {
    export type Table = 'cost_model';
    export interface Selectable {
      /**
      * **cost_model.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('cost_model_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **cost_model.costs**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
    costs: db.JSONValue;
      /**
      * **cost_model.block_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    block_id: db.Int8String;
    }
    export interface JSONSelectable {
      /**
      * **cost_model.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('cost_model_id_seq'::regclass)`
      */
    id: number;
      /**
      * **cost_model.costs**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
    costs: db.JSONValue;
      /**
      * **cost_model.block_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    block_id: number;
    }
    export interface Whereable {
      /**
      * **cost_model.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('cost_model_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **cost_model.costs**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
    costs?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      /**
      * **cost_model.block_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    block_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **cost_model.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('cost_model_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **cost_model.costs**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
    costs: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment;
      /**
      * **cost_model.block_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    block_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **cost_model.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('cost_model_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **cost_model.costs**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
    costs?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment>;
      /**
      * **cost_model.block_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    block_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'cost_model_pkey' | 'unique_cost_model';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **datum**
   * - Table in database
   */
  export namespace datum {
    export type Table = 'datum';
    export interface Selectable {
      /**
      * **datum.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('datum_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **datum.hash**
      * - `hash32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash: c.PgHash32type;
      /**
      * **datum.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: db.Int8String;
      /**
      * **datum.value**
      * - `jsonb` in database
      * - Nullable, no default
      */
    value: db.JSONValue | null;
    }
    export interface JSONSelectable {
      /**
      * **datum.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('datum_id_seq'::regclass)`
      */
    id: number;
      /**
      * **datum.hash**
      * - `hash32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash: c.PgHash32type;
      /**
      * **datum.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: number;
      /**
      * **datum.value**
      * - `jsonb` in database
      * - Nullable, no default
      */
    value: db.JSONValue | null;
    }
    export interface Whereable {
      /**
      * **datum.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('datum_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **datum.hash**
      * - `hash32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash?: c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **datum.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **datum.value**
      * - `jsonb` in database
      * - Nullable, no default
      */
    value?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **datum.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('datum_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **datum.hash**
      * - `hash32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash: c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment;
      /**
      * **datum.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **datum.value**
      * - `jsonb` in database
      * - Nullable, no default
      */
    value?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **datum.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('datum_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **datum.hash**
      * - `hash32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash?: c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment | db.SQLFragment<any, c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment>;
      /**
      * **datum.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **datum.value**
      * - `jsonb` in database
      * - Nullable, no default
      */
    value?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'datum_pkey' | 'unique_data';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **delegation**
   * - Table in database
   */
  export namespace delegation {
    export type Table = 'delegation';
    export interface Selectable {
      /**
      * **delegation.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('delegation_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **delegation.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id: db.Int8String;
      /**
      * **delegation.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index: number;
      /**
      * **delegation.pool_hash_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pool_hash_id: db.Int8String;
      /**
      * **delegation.active_epoch_no**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    active_epoch_no: db.Int8String;
      /**
      * **delegation.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: db.Int8String;
      /**
      * **delegation.slot_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    slot_no: c.PgUinteger;
      /**
      * **delegation.redeemer_id**
      * - `int8` in database
      * - Nullable, no default
      */
    redeemer_id: db.Int8String | null;
    }
    export interface JSONSelectable {
      /**
      * **delegation.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('delegation_id_seq'::regclass)`
      */
    id: number;
      /**
      * **delegation.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id: number;
      /**
      * **delegation.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index: number;
      /**
      * **delegation.pool_hash_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pool_hash_id: number;
      /**
      * **delegation.active_epoch_no**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    active_epoch_no: number;
      /**
      * **delegation.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: number;
      /**
      * **delegation.slot_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    slot_no: c.PgUinteger;
      /**
      * **delegation.redeemer_id**
      * - `int8` in database
      * - Nullable, no default
      */
    redeemer_id: number | null;
    }
    export interface Whereable {
      /**
      * **delegation.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('delegation_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **delegation.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **delegation.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **delegation.pool_hash_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pool_hash_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **delegation.active_epoch_no**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    active_epoch_no?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **delegation.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **delegation.slot_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    slot_no?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **delegation.redeemer_id**
      * - `int8` in database
      * - Nullable, no default
      */
    redeemer_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **delegation.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('delegation_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **delegation.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **delegation.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **delegation.pool_hash_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pool_hash_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **delegation.active_epoch_no**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    active_epoch_no: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **delegation.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **delegation.slot_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    slot_no: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment;
      /**
      * **delegation.redeemer_id**
      * - `int8` in database
      * - Nullable, no default
      */
    redeemer_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **delegation.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('delegation_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **delegation.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **delegation.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **delegation.pool_hash_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pool_hash_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **delegation.active_epoch_no**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    active_epoch_no?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **delegation.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **delegation.slot_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    slot_no?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment>;
      /**
      * **delegation.redeemer_id**
      * - `int8` in database
      * - Nullable, no default
      */
    redeemer_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'delegation_pkey' | 'unique_delegation';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **delisted_pool**
   * - Table in database
   */
  export namespace delisted_pool {
    export type Table = 'delisted_pool';
    export interface Selectable {
      /**
      * **delisted_pool.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('delisted_pool_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **delisted_pool.hash_raw**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash_raw: c.PgHash28type;
    }
    export interface JSONSelectable {
      /**
      * **delisted_pool.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('delisted_pool_id_seq'::regclass)`
      */
    id: number;
      /**
      * **delisted_pool.hash_raw**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash_raw: c.PgHash28type;
    }
    export interface Whereable {
      /**
      * **delisted_pool.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('delisted_pool_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **delisted_pool.hash_raw**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash_raw?: c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **delisted_pool.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('delisted_pool_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **delisted_pool.hash_raw**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash_raw: c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **delisted_pool.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('delisted_pool_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **delisted_pool.hash_raw**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash_raw?: c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment | db.SQLFragment<any, c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment>;
    }
    export type UniqueIndex = 'delisted_pool_pkey' | 'unique_delisted_pool';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **epoch**
   * - Table in database
   */
  export namespace epoch {
    export type Table = 'epoch';
    export interface Selectable {
      /**
      * **epoch.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('epoch_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **epoch.out_sum**
      * - `word128type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    out_sum: c.PgWord128type;
      /**
      * **epoch.fees**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    fees: c.PgLovelace;
      /**
      * **epoch.tx_count**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    tx_count: c.PgUinteger;
      /**
      * **epoch.blk_count**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    blk_count: c.PgUinteger;
      /**
      * **epoch.no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    no: c.PgUinteger;
      /**
      * **epoch.start_time**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
    start_time: Date;
      /**
      * **epoch.end_time**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
    end_time: Date;
    }
    export interface JSONSelectable {
      /**
      * **epoch.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('epoch_id_seq'::regclass)`
      */
    id: number;
      /**
      * **epoch.out_sum**
      * - `word128type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    out_sum: c.PgWord128type;
      /**
      * **epoch.fees**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    fees: c.PgLovelace;
      /**
      * **epoch.tx_count**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    tx_count: c.PgUinteger;
      /**
      * **epoch.blk_count**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    blk_count: c.PgUinteger;
      /**
      * **epoch.no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    no: c.PgUinteger;
      /**
      * **epoch.start_time**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
    start_time: db.TimestampString;
      /**
      * **epoch.end_time**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
    end_time: db.TimestampString;
    }
    export interface Whereable {
      /**
      * **epoch.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('epoch_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch.out_sum**
      * - `word128type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    out_sum?: c.PgWord128type | db.Parameter<c.PgWord128type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgWord128type | db.Parameter<c.PgWord128type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch.fees**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    fees?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch.tx_count**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    tx_count?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch.blk_count**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    blk_count?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch.no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    no?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch.start_time**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
    start_time?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch.end_time**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
    end_time?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **epoch.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('epoch_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **epoch.out_sum**
      * - `word128type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    out_sum: c.PgWord128type | db.Parameter<c.PgWord128type> | db.SQLFragment;
      /**
      * **epoch.fees**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    fees: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment;
      /**
      * **epoch.tx_count**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    tx_count: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment;
      /**
      * **epoch.blk_count**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    blk_count: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment;
      /**
      * **epoch.no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    no: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment;
      /**
      * **epoch.start_time**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
    start_time: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment;
      /**
      * **epoch.end_time**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
    end_time: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **epoch.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('epoch_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **epoch.out_sum**
      * - `word128type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    out_sum?: c.PgWord128type | db.Parameter<c.PgWord128type> | db.SQLFragment | db.SQLFragment<any, c.PgWord128type | db.Parameter<c.PgWord128type> | db.SQLFragment>;
      /**
      * **epoch.fees**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    fees?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment>;
      /**
      * **epoch.tx_count**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    tx_count?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment>;
      /**
      * **epoch.blk_count**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    blk_count?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment>;
      /**
      * **epoch.no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    no?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment>;
      /**
      * **epoch.start_time**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
    start_time?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment>;
      /**
      * **epoch.end_time**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
    end_time?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'epoch_pkey' | 'unique_epoch';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **epoch_param**
   * - Table in database
   */
  export namespace epoch_param {
    export type Table = 'epoch_param';
    export interface Selectable {
      /**
      * **epoch_param.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('epoch_param_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **epoch_param.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    epoch_no: c.PgUinteger;
      /**
      * **epoch_param.min_fee_a**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    min_fee_a: c.PgUinteger;
      /**
      * **epoch_param.min_fee_b**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    min_fee_b: c.PgUinteger;
      /**
      * **epoch_param.max_block_size**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    max_block_size: c.PgUinteger;
      /**
      * **epoch_param.max_tx_size**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    max_tx_size: c.PgUinteger;
      /**
      * **epoch_param.max_bh_size**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    max_bh_size: c.PgUinteger;
      /**
      * **epoch_param.key_deposit**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    key_deposit: c.PgLovelace;
      /**
      * **epoch_param.pool_deposit**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    pool_deposit: c.PgLovelace;
      /**
      * **epoch_param.max_epoch**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    max_epoch: c.PgUinteger;
      /**
      * **epoch_param.optimal_pool_count**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    optimal_pool_count: c.PgUinteger;
      /**
      * **epoch_param.influence**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
    influence: number;
      /**
      * **epoch_param.monetary_expand_rate**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
    monetary_expand_rate: number;
      /**
      * **epoch_param.treasury_growth_rate**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
    treasury_growth_rate: number;
      /**
      * **epoch_param.decentralisation**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
    decentralisation: number;
      /**
      * **epoch_param.entropy**
      * - `hash32type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    entropy: c.PgHash32type | null;
      /**
      * **epoch_param.protocol_major**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    protocol_major: c.PgUinteger;
      /**
      * **epoch_param.protocol_minor**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    protocol_minor: c.PgUinteger;
      /**
      * **epoch_param.min_utxo_value**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    min_utxo_value: c.PgLovelace;
      /**
      * **epoch_param.min_pool_cost**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    min_pool_cost: c.PgLovelace;
      /**
      * **epoch_param.nonce**
      * - `hash32type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    nonce: c.PgHash32type | null;
      /**
      * **epoch_param.coins_per_utxo_word**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    coins_per_utxo_word: c.PgLovelace | null;
      /**
      * **epoch_param.cost_model_id**
      * - `int8` in database
      * - Nullable, no default
      */
    cost_model_id: db.Int8String | null;
      /**
      * **epoch_param.price_mem**
      * - `float8` in database
      * - Nullable, no default
      */
    price_mem: number | null;
      /**
      * **epoch_param.price_step**
      * - `float8` in database
      * - Nullable, no default
      */
    price_step: number | null;
      /**
      * **epoch_param.max_tx_ex_mem**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_tx_ex_mem: c.PgWord64type | null;
      /**
      * **epoch_param.max_tx_ex_steps**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_tx_ex_steps: c.PgWord64type | null;
      /**
      * **epoch_param.max_block_ex_mem**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_block_ex_mem: c.PgWord64type | null;
      /**
      * **epoch_param.max_block_ex_steps**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_block_ex_steps: c.PgWord64type | null;
      /**
      * **epoch_param.max_val_size**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_val_size: c.PgWord64type | null;
      /**
      * **epoch_param.collateral_percent**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    collateral_percent: c.PgUinteger | null;
      /**
      * **epoch_param.max_collateral_inputs**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    max_collateral_inputs: c.PgUinteger | null;
      /**
      * **epoch_param.block_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    block_id: db.Int8String;
    }
    export interface JSONSelectable {
      /**
      * **epoch_param.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('epoch_param_id_seq'::regclass)`
      */
    id: number;
      /**
      * **epoch_param.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    epoch_no: c.PgUinteger;
      /**
      * **epoch_param.min_fee_a**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    min_fee_a: c.PgUinteger;
      /**
      * **epoch_param.min_fee_b**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    min_fee_b: c.PgUinteger;
      /**
      * **epoch_param.max_block_size**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    max_block_size: c.PgUinteger;
      /**
      * **epoch_param.max_tx_size**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    max_tx_size: c.PgUinteger;
      /**
      * **epoch_param.max_bh_size**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    max_bh_size: c.PgUinteger;
      /**
      * **epoch_param.key_deposit**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    key_deposit: c.PgLovelace;
      /**
      * **epoch_param.pool_deposit**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    pool_deposit: c.PgLovelace;
      /**
      * **epoch_param.max_epoch**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    max_epoch: c.PgUinteger;
      /**
      * **epoch_param.optimal_pool_count**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    optimal_pool_count: c.PgUinteger;
      /**
      * **epoch_param.influence**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
    influence: number;
      /**
      * **epoch_param.monetary_expand_rate**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
    monetary_expand_rate: number;
      /**
      * **epoch_param.treasury_growth_rate**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
    treasury_growth_rate: number;
      /**
      * **epoch_param.decentralisation**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
    decentralisation: number;
      /**
      * **epoch_param.entropy**
      * - `hash32type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    entropy: c.PgHash32type | null;
      /**
      * **epoch_param.protocol_major**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    protocol_major: c.PgUinteger;
      /**
      * **epoch_param.protocol_minor**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    protocol_minor: c.PgUinteger;
      /**
      * **epoch_param.min_utxo_value**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    min_utxo_value: c.PgLovelace;
      /**
      * **epoch_param.min_pool_cost**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    min_pool_cost: c.PgLovelace;
      /**
      * **epoch_param.nonce**
      * - `hash32type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    nonce: c.PgHash32type | null;
      /**
      * **epoch_param.coins_per_utxo_word**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    coins_per_utxo_word: c.PgLovelace | null;
      /**
      * **epoch_param.cost_model_id**
      * - `int8` in database
      * - Nullable, no default
      */
    cost_model_id: number | null;
      /**
      * **epoch_param.price_mem**
      * - `float8` in database
      * - Nullable, no default
      */
    price_mem: number | null;
      /**
      * **epoch_param.price_step**
      * - `float8` in database
      * - Nullable, no default
      */
    price_step: number | null;
      /**
      * **epoch_param.max_tx_ex_mem**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_tx_ex_mem: c.PgWord64type | null;
      /**
      * **epoch_param.max_tx_ex_steps**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_tx_ex_steps: c.PgWord64type | null;
      /**
      * **epoch_param.max_block_ex_mem**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_block_ex_mem: c.PgWord64type | null;
      /**
      * **epoch_param.max_block_ex_steps**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_block_ex_steps: c.PgWord64type | null;
      /**
      * **epoch_param.max_val_size**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_val_size: c.PgWord64type | null;
      /**
      * **epoch_param.collateral_percent**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    collateral_percent: c.PgUinteger | null;
      /**
      * **epoch_param.max_collateral_inputs**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    max_collateral_inputs: c.PgUinteger | null;
      /**
      * **epoch_param.block_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    block_id: number;
    }
    export interface Whereable {
      /**
      * **epoch_param.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('epoch_param_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_param.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    epoch_no?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_param.min_fee_a**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    min_fee_a?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_param.min_fee_b**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    min_fee_b?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_param.max_block_size**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    max_block_size?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_param.max_tx_size**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    max_tx_size?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_param.max_bh_size**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    max_bh_size?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_param.key_deposit**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    key_deposit?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_param.pool_deposit**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    pool_deposit?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_param.max_epoch**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    max_epoch?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_param.optimal_pool_count**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    optimal_pool_count?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_param.influence**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
    influence?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_param.monetary_expand_rate**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
    monetary_expand_rate?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_param.treasury_growth_rate**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
    treasury_growth_rate?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_param.decentralisation**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
    decentralisation?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_param.entropy**
      * - `hash32type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    entropy?: c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_param.protocol_major**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    protocol_major?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_param.protocol_minor**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    protocol_minor?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_param.min_utxo_value**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    min_utxo_value?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_param.min_pool_cost**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    min_pool_cost?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_param.nonce**
      * - `hash32type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    nonce?: c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_param.coins_per_utxo_word**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    coins_per_utxo_word?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_param.cost_model_id**
      * - `int8` in database
      * - Nullable, no default
      */
    cost_model_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_param.price_mem**
      * - `float8` in database
      * - Nullable, no default
      */
    price_mem?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_param.price_step**
      * - `float8` in database
      * - Nullable, no default
      */
    price_step?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_param.max_tx_ex_mem**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_tx_ex_mem?: c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_param.max_tx_ex_steps**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_tx_ex_steps?: c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_param.max_block_ex_mem**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_block_ex_mem?: c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_param.max_block_ex_steps**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_block_ex_steps?: c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_param.max_val_size**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_val_size?: c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_param.collateral_percent**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    collateral_percent?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_param.max_collateral_inputs**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    max_collateral_inputs?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_param.block_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    block_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **epoch_param.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('epoch_param_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **epoch_param.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    epoch_no: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment;
      /**
      * **epoch_param.min_fee_a**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    min_fee_a: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment;
      /**
      * **epoch_param.min_fee_b**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    min_fee_b: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment;
      /**
      * **epoch_param.max_block_size**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    max_block_size: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment;
      /**
      * **epoch_param.max_tx_size**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    max_tx_size: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment;
      /**
      * **epoch_param.max_bh_size**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    max_bh_size: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment;
      /**
      * **epoch_param.key_deposit**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    key_deposit: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment;
      /**
      * **epoch_param.pool_deposit**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    pool_deposit: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment;
      /**
      * **epoch_param.max_epoch**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    max_epoch: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment;
      /**
      * **epoch_param.optimal_pool_count**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    optimal_pool_count: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment;
      /**
      * **epoch_param.influence**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
    influence: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **epoch_param.monetary_expand_rate**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
    monetary_expand_rate: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **epoch_param.treasury_growth_rate**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
    treasury_growth_rate: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **epoch_param.decentralisation**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
    decentralisation: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **epoch_param.entropy**
      * - `hash32type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    entropy?: c.PgHash32type | db.Parameter<c.PgHash32type> | null | db.DefaultType | db.SQLFragment;
      /**
      * **epoch_param.protocol_major**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    protocol_major: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment;
      /**
      * **epoch_param.protocol_minor**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    protocol_minor: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment;
      /**
      * **epoch_param.min_utxo_value**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    min_utxo_value: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment;
      /**
      * **epoch_param.min_pool_cost**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    min_pool_cost: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment;
      /**
      * **epoch_param.nonce**
      * - `hash32type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    nonce?: c.PgHash32type | db.Parameter<c.PgHash32type> | null | db.DefaultType | db.SQLFragment;
      /**
      * **epoch_param.coins_per_utxo_word**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    coins_per_utxo_word?: c.PgLovelace | db.Parameter<c.PgLovelace> | null | db.DefaultType | db.SQLFragment;
      /**
      * **epoch_param.cost_model_id**
      * - `int8` in database
      * - Nullable, no default
      */
    cost_model_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **epoch_param.price_mem**
      * - `float8` in database
      * - Nullable, no default
      */
    price_mem?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **epoch_param.price_step**
      * - `float8` in database
      * - Nullable, no default
      */
    price_step?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **epoch_param.max_tx_ex_mem**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_tx_ex_mem?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment;
      /**
      * **epoch_param.max_tx_ex_steps**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_tx_ex_steps?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment;
      /**
      * **epoch_param.max_block_ex_mem**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_block_ex_mem?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment;
      /**
      * **epoch_param.max_block_ex_steps**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_block_ex_steps?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment;
      /**
      * **epoch_param.max_val_size**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_val_size?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment;
      /**
      * **epoch_param.collateral_percent**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    collateral_percent?: c.PgUinteger | db.Parameter<c.PgUinteger> | null | db.DefaultType | db.SQLFragment;
      /**
      * **epoch_param.max_collateral_inputs**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    max_collateral_inputs?: c.PgUinteger | db.Parameter<c.PgUinteger> | null | db.DefaultType | db.SQLFragment;
      /**
      * **epoch_param.block_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    block_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **epoch_param.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('epoch_param_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **epoch_param.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    epoch_no?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment>;
      /**
      * **epoch_param.min_fee_a**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    min_fee_a?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment>;
      /**
      * **epoch_param.min_fee_b**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    min_fee_b?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment>;
      /**
      * **epoch_param.max_block_size**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    max_block_size?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment>;
      /**
      * **epoch_param.max_tx_size**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    max_tx_size?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment>;
      /**
      * **epoch_param.max_bh_size**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    max_bh_size?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment>;
      /**
      * **epoch_param.key_deposit**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    key_deposit?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment>;
      /**
      * **epoch_param.pool_deposit**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    pool_deposit?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment>;
      /**
      * **epoch_param.max_epoch**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    max_epoch?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment>;
      /**
      * **epoch_param.optimal_pool_count**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    optimal_pool_count?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment>;
      /**
      * **epoch_param.influence**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
    influence?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **epoch_param.monetary_expand_rate**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
    monetary_expand_rate?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **epoch_param.treasury_growth_rate**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
    treasury_growth_rate?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **epoch_param.decentralisation**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
    decentralisation?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **epoch_param.entropy**
      * - `hash32type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    entropy?: c.PgHash32type | db.Parameter<c.PgHash32type> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgHash32type | db.Parameter<c.PgHash32type> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **epoch_param.protocol_major**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    protocol_major?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment>;
      /**
      * **epoch_param.protocol_minor**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    protocol_minor?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment>;
      /**
      * **epoch_param.min_utxo_value**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    min_utxo_value?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment>;
      /**
      * **epoch_param.min_pool_cost**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    min_pool_cost?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment>;
      /**
      * **epoch_param.nonce**
      * - `hash32type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    nonce?: c.PgHash32type | db.Parameter<c.PgHash32type> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgHash32type | db.Parameter<c.PgHash32type> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **epoch_param.coins_per_utxo_word**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    coins_per_utxo_word?: c.PgLovelace | db.Parameter<c.PgLovelace> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **epoch_param.cost_model_id**
      * - `int8` in database
      * - Nullable, no default
      */
    cost_model_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **epoch_param.price_mem**
      * - `float8` in database
      * - Nullable, no default
      */
    price_mem?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **epoch_param.price_step**
      * - `float8` in database
      * - Nullable, no default
      */
    price_step?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **epoch_param.max_tx_ex_mem**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_tx_ex_mem?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **epoch_param.max_tx_ex_steps**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_tx_ex_steps?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **epoch_param.max_block_ex_mem**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_block_ex_mem?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **epoch_param.max_block_ex_steps**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_block_ex_steps?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **epoch_param.max_val_size**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_val_size?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **epoch_param.collateral_percent**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    collateral_percent?: c.PgUinteger | db.Parameter<c.PgUinteger> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **epoch_param.max_collateral_inputs**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    max_collateral_inputs?: c.PgUinteger | db.Parameter<c.PgUinteger> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **epoch_param.block_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    block_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'epoch_param_pkey' | 'unique_epoch_param';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **epoch_reward_total_received**
   * - Table in database
   */
  export namespace epoch_reward_total_received {
    export type Table = 'epoch_reward_total_received';
    export interface Selectable {
      /**
      * **epoch_reward_total_received.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('epoch_reward_total_received_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **epoch_reward_total_received.earned_epoch**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    earned_epoch: c.PgUinteger;
      /**
      * **epoch_reward_total_received.amount**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    amount: c.PgLovelace;
    }
    export interface JSONSelectable {
      /**
      * **epoch_reward_total_received.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('epoch_reward_total_received_id_seq'::regclass)`
      */
    id: number;
      /**
      * **epoch_reward_total_received.earned_epoch**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    earned_epoch: c.PgUinteger;
      /**
      * **epoch_reward_total_received.amount**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    amount: c.PgLovelace;
    }
    export interface Whereable {
      /**
      * **epoch_reward_total_received.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('epoch_reward_total_received_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_reward_total_received.earned_epoch**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    earned_epoch?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_reward_total_received.amount**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    amount?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **epoch_reward_total_received.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('epoch_reward_total_received_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **epoch_reward_total_received.earned_epoch**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    earned_epoch: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment;
      /**
      * **epoch_reward_total_received.amount**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    amount: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **epoch_reward_total_received.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('epoch_reward_total_received_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **epoch_reward_total_received.earned_epoch**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    earned_epoch?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment>;
      /**
      * **epoch_reward_total_received.amount**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    amount?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment>;
    }
    export type UniqueIndex = 'epoch_reward_total_received_pkey' | 'unique_epoch_reward_total_received';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **epoch_stake**
   * - Table in database
   */
  export namespace epoch_stake {
    export type Table = 'epoch_stake';
    export interface Selectable {
      /**
      * **epoch_stake.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('epoch_stake_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **epoch_stake.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id: db.Int8String;
      /**
      * **epoch_stake.pool_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pool_id: db.Int8String;
      /**
      * **epoch_stake.amount**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    amount: c.PgLovelace;
      /**
      * **epoch_stake.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    epoch_no: c.PgUinteger;
    }
    export interface JSONSelectable {
      /**
      * **epoch_stake.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('epoch_stake_id_seq'::regclass)`
      */
    id: number;
      /**
      * **epoch_stake.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id: number;
      /**
      * **epoch_stake.pool_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pool_id: number;
      /**
      * **epoch_stake.amount**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    amount: c.PgLovelace;
      /**
      * **epoch_stake.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    epoch_no: c.PgUinteger;
    }
    export interface Whereable {
      /**
      * **epoch_stake.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('epoch_stake_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_stake.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_stake.pool_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pool_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_stake.amount**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    amount?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_stake.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    epoch_no?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **epoch_stake.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('epoch_stake_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **epoch_stake.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **epoch_stake.pool_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pool_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **epoch_stake.amount**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    amount: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment;
      /**
      * **epoch_stake.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    epoch_no: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **epoch_stake.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('epoch_stake_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **epoch_stake.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **epoch_stake.pool_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pool_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **epoch_stake.amount**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    amount?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment>;
      /**
      * **epoch_stake.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    epoch_no?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment>;
    }
    export type UniqueIndex = 'epoch_stake_pkey' | 'unique_stake';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **epoch_sync_time**
   * - Table in database
   */
  export namespace epoch_sync_time {
    export type Table = 'epoch_sync_time';
    export interface Selectable {
      /**
      * **epoch_sync_time.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('epoch_sync_time_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **epoch_sync_time.no**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    no: db.Int8String;
      /**
      * **epoch_sync_time.seconds**
      * - `word63type` (base type: `int8`) in database
      * - `NOT NULL`, no default
      */
    seconds: c.PgWord63type;
      /**
      * **epoch_sync_time.state**
      * - `syncstatetype` in database
      * - `NOT NULL`, no default
      */
    state: syncstatetype;
    }
    export interface JSONSelectable {
      /**
      * **epoch_sync_time.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('epoch_sync_time_id_seq'::regclass)`
      */
    id: number;
      /**
      * **epoch_sync_time.no**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    no: number;
      /**
      * **epoch_sync_time.seconds**
      * - `word63type` (base type: `int8`) in database
      * - `NOT NULL`, no default
      */
    seconds: c.PgWord63type;
      /**
      * **epoch_sync_time.state**
      * - `syncstatetype` in database
      * - `NOT NULL`, no default
      */
    state: syncstatetype;
    }
    export interface Whereable {
      /**
      * **epoch_sync_time.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('epoch_sync_time_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_sync_time.no**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    no?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_sync_time.seconds**
      * - `word63type` (base type: `int8`) in database
      * - `NOT NULL`, no default
      */
    seconds?: c.PgWord63type | db.Parameter<c.PgWord63type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgWord63type | db.Parameter<c.PgWord63type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **epoch_sync_time.state**
      * - `syncstatetype` in database
      * - `NOT NULL`, no default
      */
    state?: syncstatetype | db.Parameter<syncstatetype> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, syncstatetype | db.Parameter<syncstatetype> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **epoch_sync_time.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('epoch_sync_time_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **epoch_sync_time.no**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    no: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **epoch_sync_time.seconds**
      * - `word63type` (base type: `int8`) in database
      * - `NOT NULL`, no default
      */
    seconds: c.PgWord63type | db.Parameter<c.PgWord63type> | db.SQLFragment;
      /**
      * **epoch_sync_time.state**
      * - `syncstatetype` in database
      * - `NOT NULL`, no default
      */
    state: syncstatetype | db.Parameter<syncstatetype> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **epoch_sync_time.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('epoch_sync_time_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **epoch_sync_time.no**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    no?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **epoch_sync_time.seconds**
      * - `word63type` (base type: `int8`) in database
      * - `NOT NULL`, no default
      */
    seconds?: c.PgWord63type | db.Parameter<c.PgWord63type> | db.SQLFragment | db.SQLFragment<any, c.PgWord63type | db.Parameter<c.PgWord63type> | db.SQLFragment>;
      /**
      * **epoch_sync_time.state**
      * - `syncstatetype` in database
      * - `NOT NULL`, no default
      */
    state?: syncstatetype | db.Parameter<syncstatetype> | db.SQLFragment | db.SQLFragment<any, syncstatetype | db.Parameter<syncstatetype> | db.SQLFragment>;
    }
    export type UniqueIndex = 'epoch_sync_time_pkey' | 'unique_epoch_sync_time';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **ma_tx_mint**
   * - Table in database
   */
  export namespace ma_tx_mint {
    export type Table = 'ma_tx_mint';
    export interface Selectable {
      /**
      * **ma_tx_mint.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('ma_tx_mint_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **ma_tx_mint.quantity**
      * - `int65type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    quantity: c.PgInt65type;
      /**
      * **ma_tx_mint.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: db.Int8String;
      /**
      * **ma_tx_mint.ident**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    ident: db.Int8String;
    }
    export interface JSONSelectable {
      /**
      * **ma_tx_mint.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('ma_tx_mint_id_seq'::regclass)`
      */
    id: number;
      /**
      * **ma_tx_mint.quantity**
      * - `int65type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    quantity: c.PgInt65type;
      /**
      * **ma_tx_mint.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: number;
      /**
      * **ma_tx_mint.ident**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    ident: number;
    }
    export interface Whereable {
      /**
      * **ma_tx_mint.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('ma_tx_mint_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ma_tx_mint.quantity**
      * - `int65type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    quantity?: c.PgInt65type | db.Parameter<c.PgInt65type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgInt65type | db.Parameter<c.PgInt65type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ma_tx_mint.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ma_tx_mint.ident**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    ident?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **ma_tx_mint.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('ma_tx_mint_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **ma_tx_mint.quantity**
      * - `int65type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    quantity: c.PgInt65type | db.Parameter<c.PgInt65type> | db.SQLFragment;
      /**
      * **ma_tx_mint.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **ma_tx_mint.ident**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    ident: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **ma_tx_mint.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('ma_tx_mint_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **ma_tx_mint.quantity**
      * - `int65type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    quantity?: c.PgInt65type | db.Parameter<c.PgInt65type> | db.SQLFragment | db.SQLFragment<any, c.PgInt65type | db.Parameter<c.PgInt65type> | db.SQLFragment>;
      /**
      * **ma_tx_mint.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **ma_tx_mint.ident**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    ident?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'ma_tx_mint_pkey' | 'unique_ma_tx_mint';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **ma_tx_out**
   * - Table in database
   */
  export namespace ma_tx_out {
    export type Table = 'ma_tx_out';
    export interface Selectable {
      /**
      * **ma_tx_out.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('ma_tx_out_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **ma_tx_out.quantity**
      * - `word64type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    quantity: c.PgWord64type;
      /**
      * **ma_tx_out.tx_out_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_out_id: db.Int8String;
      /**
      * **ma_tx_out.ident**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    ident: db.Int8String;
    }
    export interface JSONSelectable {
      /**
      * **ma_tx_out.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('ma_tx_out_id_seq'::regclass)`
      */
    id: number;
      /**
      * **ma_tx_out.quantity**
      * - `word64type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    quantity: c.PgWord64type;
      /**
      * **ma_tx_out.tx_out_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_out_id: number;
      /**
      * **ma_tx_out.ident**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    ident: number;
    }
    export interface Whereable {
      /**
      * **ma_tx_out.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('ma_tx_out_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ma_tx_out.quantity**
      * - `word64type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    quantity?: c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ma_tx_out.tx_out_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_out_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ma_tx_out.ident**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    ident?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **ma_tx_out.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('ma_tx_out_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **ma_tx_out.quantity**
      * - `word64type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    quantity: c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment;
      /**
      * **ma_tx_out.tx_out_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_out_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **ma_tx_out.ident**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    ident: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **ma_tx_out.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('ma_tx_out_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **ma_tx_out.quantity**
      * - `word64type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    quantity?: c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment>;
      /**
      * **ma_tx_out.tx_out_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_out_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **ma_tx_out.ident**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    ident?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'ma_tx_out_pkey' | 'unique_ma_tx_out';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **meta**
   * - Table in database
   */
  export namespace meta {
    export type Table = 'meta';
    export interface Selectable {
      /**
      * **meta.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('meta_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **meta.start_time**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
    start_time: Date;
      /**
      * **meta.network_name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    network_name: string;
      /**
      * **meta.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    version: string;
    }
    export interface JSONSelectable {
      /**
      * **meta.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('meta_id_seq'::regclass)`
      */
    id: number;
      /**
      * **meta.start_time**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
    start_time: db.TimestampString;
      /**
      * **meta.network_name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    network_name: string;
      /**
      * **meta.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    version: string;
    }
    export interface Whereable {
      /**
      * **meta.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('meta_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **meta.start_time**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
    start_time?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **meta.network_name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    network_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **meta.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    version?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **meta.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('meta_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **meta.start_time**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
    start_time: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment;
      /**
      * **meta.network_name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    network_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **meta.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    version: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **meta.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('meta_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **meta.start_time**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
    start_time?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment>;
      /**
      * **meta.network_name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    network_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **meta.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    version?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'meta_pkey' | 'unique_meta';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **multi_asset**
   * - Table in database
   */
  export namespace multi_asset {
    export type Table = 'multi_asset';
    export interface Selectable {
      /**
      * **multi_asset.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('multi_asset_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **multi_asset.policy**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    policy: c.PgHash28type;
      /**
      * **multi_asset.name**
      * - `asset32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    name: c.PgAsset32type;
      /**
      * **multi_asset.fingerprint**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    fingerprint: string;
    }
    export interface JSONSelectable {
      /**
      * **multi_asset.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('multi_asset_id_seq'::regclass)`
      */
    id: number;
      /**
      * **multi_asset.policy**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    policy: c.PgHash28type;
      /**
      * **multi_asset.name**
      * - `asset32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    name: c.PgAsset32type;
      /**
      * **multi_asset.fingerprint**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    fingerprint: string;
    }
    export interface Whereable {
      /**
      * **multi_asset.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('multi_asset_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **multi_asset.policy**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    policy?: c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **multi_asset.name**
      * - `asset32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    name?: c.PgAsset32type | db.Parameter<c.PgAsset32type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgAsset32type | db.Parameter<c.PgAsset32type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **multi_asset.fingerprint**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    fingerprint?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **multi_asset.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('multi_asset_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **multi_asset.policy**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    policy: c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment;
      /**
      * **multi_asset.name**
      * - `asset32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    name: c.PgAsset32type | db.Parameter<c.PgAsset32type> | db.SQLFragment;
      /**
      * **multi_asset.fingerprint**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    fingerprint: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **multi_asset.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('multi_asset_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **multi_asset.policy**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    policy?: c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment | db.SQLFragment<any, c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment>;
      /**
      * **multi_asset.name**
      * - `asset32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    name?: c.PgAsset32type | db.Parameter<c.PgAsset32type> | db.SQLFragment | db.SQLFragment<any, c.PgAsset32type | db.Parameter<c.PgAsset32type> | db.SQLFragment>;
      /**
      * **multi_asset.fingerprint**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    fingerprint?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'multi_asset_pkey' | 'unique_multi_asset';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **param_proposal**
   * - Table in database
   */
  export namespace param_proposal {
    export type Table = 'param_proposal';
    export interface Selectable {
      /**
      * **param_proposal.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('param_proposal_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **param_proposal.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    epoch_no: c.PgUinteger;
      /**
      * **param_proposal.key**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    key: c.PgHash28type;
      /**
      * **param_proposal.min_fee_a**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    min_fee_a: c.PgWord64type | null;
      /**
      * **param_proposal.min_fee_b**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    min_fee_b: c.PgWord64type | null;
      /**
      * **param_proposal.max_block_size**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_block_size: c.PgWord64type | null;
      /**
      * **param_proposal.max_tx_size**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_tx_size: c.PgWord64type | null;
      /**
      * **param_proposal.max_bh_size**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_bh_size: c.PgWord64type | null;
      /**
      * **param_proposal.key_deposit**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    key_deposit: c.PgLovelace | null;
      /**
      * **param_proposal.pool_deposit**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    pool_deposit: c.PgLovelace | null;
      /**
      * **param_proposal.max_epoch**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_epoch: c.PgWord64type | null;
      /**
      * **param_proposal.optimal_pool_count**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    optimal_pool_count: c.PgWord64type | null;
      /**
      * **param_proposal.influence**
      * - `float8` in database
      * - Nullable, no default
      */
    influence: number | null;
      /**
      * **param_proposal.monetary_expand_rate**
      * - `float8` in database
      * - Nullable, no default
      */
    monetary_expand_rate: number | null;
      /**
      * **param_proposal.treasury_growth_rate**
      * - `float8` in database
      * - Nullable, no default
      */
    treasury_growth_rate: number | null;
      /**
      * **param_proposal.decentralisation**
      * - `float8` in database
      * - Nullable, no default
      */
    decentralisation: number | null;
      /**
      * **param_proposal.entropy**
      * - `hash32type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    entropy: c.PgHash32type | null;
      /**
      * **param_proposal.protocol_major**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    protocol_major: c.PgUinteger | null;
      /**
      * **param_proposal.protocol_minor**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    protocol_minor: c.PgUinteger | null;
      /**
      * **param_proposal.min_utxo_value**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    min_utxo_value: c.PgLovelace | null;
      /**
      * **param_proposal.min_pool_cost**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    min_pool_cost: c.PgLovelace | null;
      /**
      * **param_proposal.coins_per_utxo_word**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    coins_per_utxo_word: c.PgLovelace | null;
      /**
      * **param_proposal.cost_model_id**
      * - `int8` in database
      * - Nullable, no default
      */
    cost_model_id: db.Int8String | null;
      /**
      * **param_proposal.price_mem**
      * - `float8` in database
      * - Nullable, no default
      */
    price_mem: number | null;
      /**
      * **param_proposal.price_step**
      * - `float8` in database
      * - Nullable, no default
      */
    price_step: number | null;
      /**
      * **param_proposal.max_tx_ex_mem**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_tx_ex_mem: c.PgWord64type | null;
      /**
      * **param_proposal.max_tx_ex_steps**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_tx_ex_steps: c.PgWord64type | null;
      /**
      * **param_proposal.max_block_ex_mem**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_block_ex_mem: c.PgWord64type | null;
      /**
      * **param_proposal.max_block_ex_steps**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_block_ex_steps: c.PgWord64type | null;
      /**
      * **param_proposal.max_val_size**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_val_size: c.PgWord64type | null;
      /**
      * **param_proposal.collateral_percent**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    collateral_percent: c.PgUinteger | null;
      /**
      * **param_proposal.max_collateral_inputs**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    max_collateral_inputs: c.PgUinteger | null;
      /**
      * **param_proposal.registered_tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    registered_tx_id: db.Int8String;
    }
    export interface JSONSelectable {
      /**
      * **param_proposal.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('param_proposal_id_seq'::regclass)`
      */
    id: number;
      /**
      * **param_proposal.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    epoch_no: c.PgUinteger;
      /**
      * **param_proposal.key**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    key: c.PgHash28type;
      /**
      * **param_proposal.min_fee_a**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    min_fee_a: c.PgWord64type | null;
      /**
      * **param_proposal.min_fee_b**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    min_fee_b: c.PgWord64type | null;
      /**
      * **param_proposal.max_block_size**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_block_size: c.PgWord64type | null;
      /**
      * **param_proposal.max_tx_size**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_tx_size: c.PgWord64type | null;
      /**
      * **param_proposal.max_bh_size**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_bh_size: c.PgWord64type | null;
      /**
      * **param_proposal.key_deposit**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    key_deposit: c.PgLovelace | null;
      /**
      * **param_proposal.pool_deposit**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    pool_deposit: c.PgLovelace | null;
      /**
      * **param_proposal.max_epoch**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_epoch: c.PgWord64type | null;
      /**
      * **param_proposal.optimal_pool_count**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    optimal_pool_count: c.PgWord64type | null;
      /**
      * **param_proposal.influence**
      * - `float8` in database
      * - Nullable, no default
      */
    influence: number | null;
      /**
      * **param_proposal.monetary_expand_rate**
      * - `float8` in database
      * - Nullable, no default
      */
    monetary_expand_rate: number | null;
      /**
      * **param_proposal.treasury_growth_rate**
      * - `float8` in database
      * - Nullable, no default
      */
    treasury_growth_rate: number | null;
      /**
      * **param_proposal.decentralisation**
      * - `float8` in database
      * - Nullable, no default
      */
    decentralisation: number | null;
      /**
      * **param_proposal.entropy**
      * - `hash32type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    entropy: c.PgHash32type | null;
      /**
      * **param_proposal.protocol_major**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    protocol_major: c.PgUinteger | null;
      /**
      * **param_proposal.protocol_minor**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    protocol_minor: c.PgUinteger | null;
      /**
      * **param_proposal.min_utxo_value**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    min_utxo_value: c.PgLovelace | null;
      /**
      * **param_proposal.min_pool_cost**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    min_pool_cost: c.PgLovelace | null;
      /**
      * **param_proposal.coins_per_utxo_word**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    coins_per_utxo_word: c.PgLovelace | null;
      /**
      * **param_proposal.cost_model_id**
      * - `int8` in database
      * - Nullable, no default
      */
    cost_model_id: number | null;
      /**
      * **param_proposal.price_mem**
      * - `float8` in database
      * - Nullable, no default
      */
    price_mem: number | null;
      /**
      * **param_proposal.price_step**
      * - `float8` in database
      * - Nullable, no default
      */
    price_step: number | null;
      /**
      * **param_proposal.max_tx_ex_mem**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_tx_ex_mem: c.PgWord64type | null;
      /**
      * **param_proposal.max_tx_ex_steps**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_tx_ex_steps: c.PgWord64type | null;
      /**
      * **param_proposal.max_block_ex_mem**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_block_ex_mem: c.PgWord64type | null;
      /**
      * **param_proposal.max_block_ex_steps**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_block_ex_steps: c.PgWord64type | null;
      /**
      * **param_proposal.max_val_size**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_val_size: c.PgWord64type | null;
      /**
      * **param_proposal.collateral_percent**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    collateral_percent: c.PgUinteger | null;
      /**
      * **param_proposal.max_collateral_inputs**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    max_collateral_inputs: c.PgUinteger | null;
      /**
      * **param_proposal.registered_tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    registered_tx_id: number;
    }
    export interface Whereable {
      /**
      * **param_proposal.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('param_proposal_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **param_proposal.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    epoch_no?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **param_proposal.key**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    key?: c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **param_proposal.min_fee_a**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    min_fee_a?: c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **param_proposal.min_fee_b**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    min_fee_b?: c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **param_proposal.max_block_size**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_block_size?: c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **param_proposal.max_tx_size**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_tx_size?: c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **param_proposal.max_bh_size**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_bh_size?: c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **param_proposal.key_deposit**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    key_deposit?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn>;
      /**
      * **param_proposal.pool_deposit**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    pool_deposit?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn>;
      /**
      * **param_proposal.max_epoch**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_epoch?: c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **param_proposal.optimal_pool_count**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    optimal_pool_count?: c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **param_proposal.influence**
      * - `float8` in database
      * - Nullable, no default
      */
    influence?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **param_proposal.monetary_expand_rate**
      * - `float8` in database
      * - Nullable, no default
      */
    monetary_expand_rate?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **param_proposal.treasury_growth_rate**
      * - `float8` in database
      * - Nullable, no default
      */
    treasury_growth_rate?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **param_proposal.decentralisation**
      * - `float8` in database
      * - Nullable, no default
      */
    decentralisation?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **param_proposal.entropy**
      * - `hash32type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    entropy?: c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **param_proposal.protocol_major**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    protocol_major?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **param_proposal.protocol_minor**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    protocol_minor?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **param_proposal.min_utxo_value**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    min_utxo_value?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn>;
      /**
      * **param_proposal.min_pool_cost**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    min_pool_cost?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn>;
      /**
      * **param_proposal.coins_per_utxo_word**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    coins_per_utxo_word?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn>;
      /**
      * **param_proposal.cost_model_id**
      * - `int8` in database
      * - Nullable, no default
      */
    cost_model_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **param_proposal.price_mem**
      * - `float8` in database
      * - Nullable, no default
      */
    price_mem?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **param_proposal.price_step**
      * - `float8` in database
      * - Nullable, no default
      */
    price_step?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **param_proposal.max_tx_ex_mem**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_tx_ex_mem?: c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **param_proposal.max_tx_ex_steps**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_tx_ex_steps?: c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **param_proposal.max_block_ex_mem**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_block_ex_mem?: c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **param_proposal.max_block_ex_steps**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_block_ex_steps?: c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **param_proposal.max_val_size**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_val_size?: c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **param_proposal.collateral_percent**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    collateral_percent?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **param_proposal.max_collateral_inputs**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    max_collateral_inputs?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **param_proposal.registered_tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    registered_tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **param_proposal.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('param_proposal_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **param_proposal.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    epoch_no: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment;
      /**
      * **param_proposal.key**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    key: c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment;
      /**
      * **param_proposal.min_fee_a**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    min_fee_a?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment;
      /**
      * **param_proposal.min_fee_b**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    min_fee_b?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment;
      /**
      * **param_proposal.max_block_size**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_block_size?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment;
      /**
      * **param_proposal.max_tx_size**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_tx_size?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment;
      /**
      * **param_proposal.max_bh_size**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_bh_size?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment;
      /**
      * **param_proposal.key_deposit**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    key_deposit?: c.PgLovelace | db.Parameter<c.PgLovelace> | null | db.DefaultType | db.SQLFragment;
      /**
      * **param_proposal.pool_deposit**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    pool_deposit?: c.PgLovelace | db.Parameter<c.PgLovelace> | null | db.DefaultType | db.SQLFragment;
      /**
      * **param_proposal.max_epoch**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_epoch?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment;
      /**
      * **param_proposal.optimal_pool_count**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    optimal_pool_count?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment;
      /**
      * **param_proposal.influence**
      * - `float8` in database
      * - Nullable, no default
      */
    influence?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **param_proposal.monetary_expand_rate**
      * - `float8` in database
      * - Nullable, no default
      */
    monetary_expand_rate?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **param_proposal.treasury_growth_rate**
      * - `float8` in database
      * - Nullable, no default
      */
    treasury_growth_rate?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **param_proposal.decentralisation**
      * - `float8` in database
      * - Nullable, no default
      */
    decentralisation?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **param_proposal.entropy**
      * - `hash32type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    entropy?: c.PgHash32type | db.Parameter<c.PgHash32type> | null | db.DefaultType | db.SQLFragment;
      /**
      * **param_proposal.protocol_major**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    protocol_major?: c.PgUinteger | db.Parameter<c.PgUinteger> | null | db.DefaultType | db.SQLFragment;
      /**
      * **param_proposal.protocol_minor**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    protocol_minor?: c.PgUinteger | db.Parameter<c.PgUinteger> | null | db.DefaultType | db.SQLFragment;
      /**
      * **param_proposal.min_utxo_value**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    min_utxo_value?: c.PgLovelace | db.Parameter<c.PgLovelace> | null | db.DefaultType | db.SQLFragment;
      /**
      * **param_proposal.min_pool_cost**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    min_pool_cost?: c.PgLovelace | db.Parameter<c.PgLovelace> | null | db.DefaultType | db.SQLFragment;
      /**
      * **param_proposal.coins_per_utxo_word**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    coins_per_utxo_word?: c.PgLovelace | db.Parameter<c.PgLovelace> | null | db.DefaultType | db.SQLFragment;
      /**
      * **param_proposal.cost_model_id**
      * - `int8` in database
      * - Nullable, no default
      */
    cost_model_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **param_proposal.price_mem**
      * - `float8` in database
      * - Nullable, no default
      */
    price_mem?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **param_proposal.price_step**
      * - `float8` in database
      * - Nullable, no default
      */
    price_step?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **param_proposal.max_tx_ex_mem**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_tx_ex_mem?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment;
      /**
      * **param_proposal.max_tx_ex_steps**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_tx_ex_steps?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment;
      /**
      * **param_proposal.max_block_ex_mem**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_block_ex_mem?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment;
      /**
      * **param_proposal.max_block_ex_steps**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_block_ex_steps?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment;
      /**
      * **param_proposal.max_val_size**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_val_size?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment;
      /**
      * **param_proposal.collateral_percent**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    collateral_percent?: c.PgUinteger | db.Parameter<c.PgUinteger> | null | db.DefaultType | db.SQLFragment;
      /**
      * **param_proposal.max_collateral_inputs**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    max_collateral_inputs?: c.PgUinteger | db.Parameter<c.PgUinteger> | null | db.DefaultType | db.SQLFragment;
      /**
      * **param_proposal.registered_tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    registered_tx_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **param_proposal.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('param_proposal_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **param_proposal.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    epoch_no?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment>;
      /**
      * **param_proposal.key**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    key?: c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment | db.SQLFragment<any, c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment>;
      /**
      * **param_proposal.min_fee_a**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    min_fee_a?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **param_proposal.min_fee_b**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    min_fee_b?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **param_proposal.max_block_size**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_block_size?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **param_proposal.max_tx_size**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_tx_size?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **param_proposal.max_bh_size**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_bh_size?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **param_proposal.key_deposit**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    key_deposit?: c.PgLovelace | db.Parameter<c.PgLovelace> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **param_proposal.pool_deposit**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    pool_deposit?: c.PgLovelace | db.Parameter<c.PgLovelace> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **param_proposal.max_epoch**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_epoch?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **param_proposal.optimal_pool_count**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    optimal_pool_count?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **param_proposal.influence**
      * - `float8` in database
      * - Nullable, no default
      */
    influence?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **param_proposal.monetary_expand_rate**
      * - `float8` in database
      * - Nullable, no default
      */
    monetary_expand_rate?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **param_proposal.treasury_growth_rate**
      * - `float8` in database
      * - Nullable, no default
      */
    treasury_growth_rate?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **param_proposal.decentralisation**
      * - `float8` in database
      * - Nullable, no default
      */
    decentralisation?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **param_proposal.entropy**
      * - `hash32type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    entropy?: c.PgHash32type | db.Parameter<c.PgHash32type> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgHash32type | db.Parameter<c.PgHash32type> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **param_proposal.protocol_major**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    protocol_major?: c.PgUinteger | db.Parameter<c.PgUinteger> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **param_proposal.protocol_minor**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    protocol_minor?: c.PgUinteger | db.Parameter<c.PgUinteger> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **param_proposal.min_utxo_value**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    min_utxo_value?: c.PgLovelace | db.Parameter<c.PgLovelace> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **param_proposal.min_pool_cost**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    min_pool_cost?: c.PgLovelace | db.Parameter<c.PgLovelace> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **param_proposal.coins_per_utxo_word**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    coins_per_utxo_word?: c.PgLovelace | db.Parameter<c.PgLovelace> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **param_proposal.cost_model_id**
      * - `int8` in database
      * - Nullable, no default
      */
    cost_model_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **param_proposal.price_mem**
      * - `float8` in database
      * - Nullable, no default
      */
    price_mem?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **param_proposal.price_step**
      * - `float8` in database
      * - Nullable, no default
      */
    price_step?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **param_proposal.max_tx_ex_mem**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_tx_ex_mem?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **param_proposal.max_tx_ex_steps**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_tx_ex_steps?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **param_proposal.max_block_ex_mem**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_block_ex_mem?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **param_proposal.max_block_ex_steps**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_block_ex_steps?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **param_proposal.max_val_size**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    max_val_size?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **param_proposal.collateral_percent**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    collateral_percent?: c.PgUinteger | db.Parameter<c.PgUinteger> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **param_proposal.max_collateral_inputs**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    max_collateral_inputs?: c.PgUinteger | db.Parameter<c.PgUinteger> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **param_proposal.registered_tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    registered_tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'param_proposal_pkey' | 'unique_param_proposal';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **pool_hash**
   * - Table in database
   */
  export namespace pool_hash {
    export type Table = 'pool_hash';
    export interface Selectable {
      /**
      * **pool_hash.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_hash_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **pool_hash.hash_raw**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash_raw: c.PgHash28type;
      /**
      * **pool_hash.view**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    view: string;
    }
    export interface JSONSelectable {
      /**
      * **pool_hash.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_hash_id_seq'::regclass)`
      */
    id: number;
      /**
      * **pool_hash.hash_raw**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash_raw: c.PgHash28type;
      /**
      * **pool_hash.view**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    view: string;
    }
    export interface Whereable {
      /**
      * **pool_hash.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_hash_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_hash.hash_raw**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash_raw?: c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_hash.view**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    view?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **pool_hash.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_hash_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **pool_hash.hash_raw**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash_raw: c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment;
      /**
      * **pool_hash.view**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    view: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **pool_hash.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_hash_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **pool_hash.hash_raw**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash_raw?: c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment | db.SQLFragment<any, c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment>;
      /**
      * **pool_hash.view**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    view?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'pool_hash_pkey' | 'unique_pool_hash';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **pool_metadata_ref**
   * - Table in database
   */
  export namespace pool_metadata_ref {
    export type Table = 'pool_metadata_ref';
    export interface Selectable {
      /**
      * **pool_metadata_ref.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_metadata_ref_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **pool_metadata_ref.pool_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pool_id: db.Int8String;
      /**
      * **pool_metadata_ref.url**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    url: string;
      /**
      * **pool_metadata_ref.hash**
      * - `hash32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash: c.PgHash32type;
      /**
      * **pool_metadata_ref.registered_tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    registered_tx_id: db.Int8String;
    }
    export interface JSONSelectable {
      /**
      * **pool_metadata_ref.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_metadata_ref_id_seq'::regclass)`
      */
    id: number;
      /**
      * **pool_metadata_ref.pool_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pool_id: number;
      /**
      * **pool_metadata_ref.url**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    url: string;
      /**
      * **pool_metadata_ref.hash**
      * - `hash32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash: c.PgHash32type;
      /**
      * **pool_metadata_ref.registered_tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    registered_tx_id: number;
    }
    export interface Whereable {
      /**
      * **pool_metadata_ref.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_metadata_ref_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_metadata_ref.pool_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pool_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_metadata_ref.url**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_metadata_ref.hash**
      * - `hash32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash?: c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_metadata_ref.registered_tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    registered_tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **pool_metadata_ref.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_metadata_ref_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **pool_metadata_ref.pool_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pool_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **pool_metadata_ref.url**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    url: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **pool_metadata_ref.hash**
      * - `hash32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash: c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment;
      /**
      * **pool_metadata_ref.registered_tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    registered_tx_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **pool_metadata_ref.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_metadata_ref_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **pool_metadata_ref.pool_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pool_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **pool_metadata_ref.url**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    url?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **pool_metadata_ref.hash**
      * - `hash32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash?: c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment | db.SQLFragment<any, c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment>;
      /**
      * **pool_metadata_ref.registered_tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    registered_tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'pool_metadata_ref_pkey' | 'unique_pool_metadata_ref';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **pool_offline_data**
   * - Table in database
   */
  export namespace pool_offline_data {
    export type Table = 'pool_offline_data';
    export interface Selectable {
      /**
      * **pool_offline_data.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_offline_data_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **pool_offline_data.pool_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pool_id: db.Int8String;
      /**
      * **pool_offline_data.ticker_name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    ticker_name: string;
      /**
      * **pool_offline_data.hash**
      * - `hash32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash: c.PgHash32type;
      /**
      * **pool_offline_data.json**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
    json: db.JSONValue;
      /**
      * **pool_offline_data.bytes**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
    bytes: Buffer;
      /**
      * **pool_offline_data.pmr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pmr_id: db.Int8String;
    }
    export interface JSONSelectable {
      /**
      * **pool_offline_data.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_offline_data_id_seq'::regclass)`
      */
    id: number;
      /**
      * **pool_offline_data.pool_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pool_id: number;
      /**
      * **pool_offline_data.ticker_name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    ticker_name: string;
      /**
      * **pool_offline_data.hash**
      * - `hash32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash: c.PgHash32type;
      /**
      * **pool_offline_data.json**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
    json: db.JSONValue;
      /**
      * **pool_offline_data.bytes**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
    bytes: db.ByteArrayString;
      /**
      * **pool_offline_data.pmr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pmr_id: number;
    }
    export interface Whereable {
      /**
      * **pool_offline_data.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_offline_data_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_offline_data.pool_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pool_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_offline_data.ticker_name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    ticker_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_offline_data.hash**
      * - `hash32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash?: c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_offline_data.json**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
    json?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_offline_data.bytes**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
    bytes?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_offline_data.pmr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pmr_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **pool_offline_data.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_offline_data_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **pool_offline_data.pool_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pool_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **pool_offline_data.ticker_name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    ticker_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **pool_offline_data.hash**
      * - `hash32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash: c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment;
      /**
      * **pool_offline_data.json**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
    json: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment;
      /**
      * **pool_offline_data.bytes**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
    bytes: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment;
      /**
      * **pool_offline_data.pmr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pmr_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **pool_offline_data.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_offline_data_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **pool_offline_data.pool_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pool_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **pool_offline_data.ticker_name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    ticker_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **pool_offline_data.hash**
      * - `hash32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash?: c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment | db.SQLFragment<any, c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment>;
      /**
      * **pool_offline_data.json**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
    json?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment>;
      /**
      * **pool_offline_data.bytes**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
    bytes?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment>;
      /**
      * **pool_offline_data.pmr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pmr_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'pool_offline_data_pkey' | 'unique_pool_offline_data';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **pool_offline_fetch_error**
   * - Table in database
   */
  export namespace pool_offline_fetch_error {
    export type Table = 'pool_offline_fetch_error';
    export interface Selectable {
      /**
      * **pool_offline_fetch_error.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_offline_fetch_error_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **pool_offline_fetch_error.pool_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pool_id: db.Int8String;
      /**
      * **pool_offline_fetch_error.fetch_time**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
    fetch_time: Date;
      /**
      * **pool_offline_fetch_error.pmr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pmr_id: db.Int8String;
      /**
      * **pool_offline_fetch_error.fetch_error**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    fetch_error: string;
      /**
      * **pool_offline_fetch_error.retry_count**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    retry_count: c.PgUinteger;
    }
    export interface JSONSelectable {
      /**
      * **pool_offline_fetch_error.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_offline_fetch_error_id_seq'::regclass)`
      */
    id: number;
      /**
      * **pool_offline_fetch_error.pool_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pool_id: number;
      /**
      * **pool_offline_fetch_error.fetch_time**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
    fetch_time: db.TimestampString;
      /**
      * **pool_offline_fetch_error.pmr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pmr_id: number;
      /**
      * **pool_offline_fetch_error.fetch_error**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    fetch_error: string;
      /**
      * **pool_offline_fetch_error.retry_count**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    retry_count: c.PgUinteger;
    }
    export interface Whereable {
      /**
      * **pool_offline_fetch_error.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_offline_fetch_error_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_offline_fetch_error.pool_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pool_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_offline_fetch_error.fetch_time**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
    fetch_time?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_offline_fetch_error.pmr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pmr_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_offline_fetch_error.fetch_error**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    fetch_error?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_offline_fetch_error.retry_count**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    retry_count?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **pool_offline_fetch_error.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_offline_fetch_error_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **pool_offline_fetch_error.pool_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pool_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **pool_offline_fetch_error.fetch_time**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
    fetch_time: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment;
      /**
      * **pool_offline_fetch_error.pmr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pmr_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **pool_offline_fetch_error.fetch_error**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    fetch_error: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **pool_offline_fetch_error.retry_count**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    retry_count: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **pool_offline_fetch_error.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_offline_fetch_error_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **pool_offline_fetch_error.pool_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pool_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **pool_offline_fetch_error.fetch_time**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
    fetch_time?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment>;
      /**
      * **pool_offline_fetch_error.pmr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pmr_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **pool_offline_fetch_error.fetch_error**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    fetch_error?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **pool_offline_fetch_error.retry_count**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    retry_count?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment>;
    }
    export type UniqueIndex = 'pool_offline_fetch_error_pkey' | 'unique_pool_offline_fetch_error';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **pool_owner**
   * - Table in database
   */
  export namespace pool_owner {
    export type Table = 'pool_owner';
    export interface Selectable {
      /**
      * **pool_owner.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_owner_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **pool_owner.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id: db.Int8String;
      /**
      * **pool_owner.pool_hash_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pool_hash_id: db.Int8String;
      /**
      * **pool_owner.registered_tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    registered_tx_id: db.Int8String;
    }
    export interface JSONSelectable {
      /**
      * **pool_owner.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_owner_id_seq'::regclass)`
      */
    id: number;
      /**
      * **pool_owner.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id: number;
      /**
      * **pool_owner.pool_hash_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pool_hash_id: number;
      /**
      * **pool_owner.registered_tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    registered_tx_id: number;
    }
    export interface Whereable {
      /**
      * **pool_owner.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_owner_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_owner.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_owner.pool_hash_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pool_hash_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_owner.registered_tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    registered_tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **pool_owner.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_owner_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **pool_owner.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **pool_owner.pool_hash_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pool_hash_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **pool_owner.registered_tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    registered_tx_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **pool_owner.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_owner_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **pool_owner.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **pool_owner.pool_hash_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    pool_hash_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **pool_owner.registered_tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    registered_tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'pool_owner_pkey' | 'unique_pool_owner';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **pool_relay**
   * - Table in database
   */
  export namespace pool_relay {
    export type Table = 'pool_relay';
    export interface Selectable {
      /**
      * **pool_relay.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_relay_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **pool_relay.update_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    update_id: db.Int8String;
      /**
      * **pool_relay.ipv4**
      * - `varchar` in database
      * - Nullable, no default
      */
    ipv4: string | null;
      /**
      * **pool_relay.ipv6**
      * - `varchar` in database
      * - Nullable, no default
      */
    ipv6: string | null;
      /**
      * **pool_relay.dns_name**
      * - `varchar` in database
      * - Nullable, no default
      */
    dns_name: string | null;
      /**
      * **pool_relay.dns_srv_name**
      * - `varchar` in database
      * - Nullable, no default
      */
    dns_srv_name: string | null;
      /**
      * **pool_relay.port**
      * - `int4` in database
      * - Nullable, no default
      */
    port: number | null;
    }
    export interface JSONSelectable {
      /**
      * **pool_relay.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_relay_id_seq'::regclass)`
      */
    id: number;
      /**
      * **pool_relay.update_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    update_id: number;
      /**
      * **pool_relay.ipv4**
      * - `varchar` in database
      * - Nullable, no default
      */
    ipv4: string | null;
      /**
      * **pool_relay.ipv6**
      * - `varchar` in database
      * - Nullable, no default
      */
    ipv6: string | null;
      /**
      * **pool_relay.dns_name**
      * - `varchar` in database
      * - Nullable, no default
      */
    dns_name: string | null;
      /**
      * **pool_relay.dns_srv_name**
      * - `varchar` in database
      * - Nullable, no default
      */
    dns_srv_name: string | null;
      /**
      * **pool_relay.port**
      * - `int4` in database
      * - Nullable, no default
      */
    port: number | null;
    }
    export interface Whereable {
      /**
      * **pool_relay.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_relay_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_relay.update_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    update_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_relay.ipv4**
      * - `varchar` in database
      * - Nullable, no default
      */
    ipv4?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_relay.ipv6**
      * - `varchar` in database
      * - Nullable, no default
      */
    ipv6?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_relay.dns_name**
      * - `varchar` in database
      * - Nullable, no default
      */
    dns_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_relay.dns_srv_name**
      * - `varchar` in database
      * - Nullable, no default
      */
    dns_srv_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_relay.port**
      * - `int4` in database
      * - Nullable, no default
      */
    port?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **pool_relay.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_relay_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **pool_relay.update_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    update_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **pool_relay.ipv4**
      * - `varchar` in database
      * - Nullable, no default
      */
    ipv4?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **pool_relay.ipv6**
      * - `varchar` in database
      * - Nullable, no default
      */
    ipv6?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **pool_relay.dns_name**
      * - `varchar` in database
      * - Nullable, no default
      */
    dns_name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **pool_relay.dns_srv_name**
      * - `varchar` in database
      * - Nullable, no default
      */
    dns_srv_name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **pool_relay.port**
      * - `int4` in database
      * - Nullable, no default
      */
    port?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **pool_relay.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_relay_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **pool_relay.update_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    update_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **pool_relay.ipv4**
      * - `varchar` in database
      * - Nullable, no default
      */
    ipv4?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **pool_relay.ipv6**
      * - `varchar` in database
      * - Nullable, no default
      */
    ipv6?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **pool_relay.dns_name**
      * - `varchar` in database
      * - Nullable, no default
      */
    dns_name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **pool_relay.dns_srv_name**
      * - `varchar` in database
      * - Nullable, no default
      */
    dns_srv_name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **pool_relay.port**
      * - `int4` in database
      * - Nullable, no default
      */
    port?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'pool_relay_pkey' | 'unique_pool_relay';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **pool_retire**
   * - Table in database
   */
  export namespace pool_retire {
    export type Table = 'pool_retire';
    export interface Selectable {
      /**
      * **pool_retire.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_retire_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **pool_retire.hash_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    hash_id: db.Int8String;
      /**
      * **pool_retire.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index: number;
      /**
      * **pool_retire.announced_tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    announced_tx_id: db.Int8String;
      /**
      * **pool_retire.retiring_epoch**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    retiring_epoch: c.PgUinteger;
    }
    export interface JSONSelectable {
      /**
      * **pool_retire.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_retire_id_seq'::regclass)`
      */
    id: number;
      /**
      * **pool_retire.hash_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    hash_id: number;
      /**
      * **pool_retire.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index: number;
      /**
      * **pool_retire.announced_tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    announced_tx_id: number;
      /**
      * **pool_retire.retiring_epoch**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    retiring_epoch: c.PgUinteger;
    }
    export interface Whereable {
      /**
      * **pool_retire.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_retire_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_retire.hash_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    hash_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_retire.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_retire.announced_tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    announced_tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_retire.retiring_epoch**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    retiring_epoch?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **pool_retire.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_retire_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **pool_retire.hash_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    hash_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **pool_retire.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **pool_retire.announced_tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    announced_tx_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **pool_retire.retiring_epoch**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    retiring_epoch: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **pool_retire.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_retire_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **pool_retire.hash_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    hash_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **pool_retire.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **pool_retire.announced_tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    announced_tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **pool_retire.retiring_epoch**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    retiring_epoch?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment>;
    }
    export type UniqueIndex = 'pool_retire_pkey' | 'unique_pool_retiring';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **pool_update**
   * - Table in database
   */
  export namespace pool_update {
    export type Table = 'pool_update';
    export interface Selectable {
      /**
      * **pool_update.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_update_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **pool_update.hash_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    hash_id: db.Int8String;
      /**
      * **pool_update.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index: number;
      /**
      * **pool_update.vrf_key_hash**
      * - `hash32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    vrf_key_hash: c.PgHash32type;
      /**
      * **pool_update.pledge**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    pledge: c.PgLovelace;
      /**
      * **pool_update.reward_addr**
      * - `addr29type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    reward_addr: c.PgAddr29type;
      /**
      * **pool_update.active_epoch_no**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    active_epoch_no: db.Int8String;
      /**
      * **pool_update.meta_id**
      * - `int8` in database
      * - Nullable, no default
      */
    meta_id: db.Int8String | null;
      /**
      * **pool_update.margin**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
    margin: number;
      /**
      * **pool_update.fixed_cost**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    fixed_cost: c.PgLovelace;
      /**
      * **pool_update.registered_tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    registered_tx_id: db.Int8String;
    }
    export interface JSONSelectable {
      /**
      * **pool_update.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_update_id_seq'::regclass)`
      */
    id: number;
      /**
      * **pool_update.hash_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    hash_id: number;
      /**
      * **pool_update.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index: number;
      /**
      * **pool_update.vrf_key_hash**
      * - `hash32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    vrf_key_hash: c.PgHash32type;
      /**
      * **pool_update.pledge**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    pledge: c.PgLovelace;
      /**
      * **pool_update.reward_addr**
      * - `addr29type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    reward_addr: c.PgAddr29type;
      /**
      * **pool_update.active_epoch_no**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    active_epoch_no: number;
      /**
      * **pool_update.meta_id**
      * - `int8` in database
      * - Nullable, no default
      */
    meta_id: number | null;
      /**
      * **pool_update.margin**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
    margin: number;
      /**
      * **pool_update.fixed_cost**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    fixed_cost: c.PgLovelace;
      /**
      * **pool_update.registered_tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    registered_tx_id: number;
    }
    export interface Whereable {
      /**
      * **pool_update.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_update_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_update.hash_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    hash_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_update.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_update.vrf_key_hash**
      * - `hash32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    vrf_key_hash?: c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_update.pledge**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    pledge?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_update.reward_addr**
      * - `addr29type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    reward_addr?: c.PgAddr29type | db.Parameter<c.PgAddr29type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgAddr29type | db.Parameter<c.PgAddr29type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_update.active_epoch_no**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    active_epoch_no?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_update.meta_id**
      * - `int8` in database
      * - Nullable, no default
      */
    meta_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_update.margin**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
    margin?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_update.fixed_cost**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    fixed_cost?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pool_update.registered_tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    registered_tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **pool_update.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_update_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **pool_update.hash_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    hash_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **pool_update.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **pool_update.vrf_key_hash**
      * - `hash32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    vrf_key_hash: c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment;
      /**
      * **pool_update.pledge**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    pledge: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment;
      /**
      * **pool_update.reward_addr**
      * - `addr29type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    reward_addr: c.PgAddr29type | db.Parameter<c.PgAddr29type> | db.SQLFragment;
      /**
      * **pool_update.active_epoch_no**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    active_epoch_no: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **pool_update.meta_id**
      * - `int8` in database
      * - Nullable, no default
      */
    meta_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **pool_update.margin**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
    margin: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **pool_update.fixed_cost**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    fixed_cost: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment;
      /**
      * **pool_update.registered_tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    registered_tx_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **pool_update.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pool_update_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **pool_update.hash_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    hash_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **pool_update.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **pool_update.vrf_key_hash**
      * - `hash32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    vrf_key_hash?: c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment | db.SQLFragment<any, c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment>;
      /**
      * **pool_update.pledge**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    pledge?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment>;
      /**
      * **pool_update.reward_addr**
      * - `addr29type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    reward_addr?: c.PgAddr29type | db.Parameter<c.PgAddr29type> | db.SQLFragment | db.SQLFragment<any, c.PgAddr29type | db.Parameter<c.PgAddr29type> | db.SQLFragment>;
      /**
      * **pool_update.active_epoch_no**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    active_epoch_no?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **pool_update.meta_id**
      * - `int8` in database
      * - Nullable, no default
      */
    meta_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **pool_update.margin**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
    margin?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **pool_update.fixed_cost**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    fixed_cost?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment>;
      /**
      * **pool_update.registered_tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    registered_tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'pool_update_pkey' | 'unique_pool_update';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **pot_transfer**
   * - Table in database
   */
  export namespace pot_transfer {
    export type Table = 'pot_transfer';
    export interface Selectable {
      /**
      * **pot_transfer.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pot_transfer_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **pot_transfer.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index: number;
      /**
      * **pot_transfer.treasury**
      * - `int65type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    treasury: c.PgInt65type;
      /**
      * **pot_transfer.reserves**
      * - `int65type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    reserves: c.PgInt65type;
      /**
      * **pot_transfer.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: db.Int8String;
    }
    export interface JSONSelectable {
      /**
      * **pot_transfer.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pot_transfer_id_seq'::regclass)`
      */
    id: number;
      /**
      * **pot_transfer.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index: number;
      /**
      * **pot_transfer.treasury**
      * - `int65type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    treasury: c.PgInt65type;
      /**
      * **pot_transfer.reserves**
      * - `int65type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    reserves: c.PgInt65type;
      /**
      * **pot_transfer.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: number;
    }
    export interface Whereable {
      /**
      * **pot_transfer.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pot_transfer_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pot_transfer.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pot_transfer.treasury**
      * - `int65type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    treasury?: c.PgInt65type | db.Parameter<c.PgInt65type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgInt65type | db.Parameter<c.PgInt65type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pot_transfer.reserves**
      * - `int65type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    reserves?: c.PgInt65type | db.Parameter<c.PgInt65type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgInt65type | db.Parameter<c.PgInt65type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pot_transfer.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **pot_transfer.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pot_transfer_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **pot_transfer.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **pot_transfer.treasury**
      * - `int65type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    treasury: c.PgInt65type | db.Parameter<c.PgInt65type> | db.SQLFragment;
      /**
      * **pot_transfer.reserves**
      * - `int65type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    reserves: c.PgInt65type | db.Parameter<c.PgInt65type> | db.SQLFragment;
      /**
      * **pot_transfer.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **pot_transfer.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('pot_transfer_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **pot_transfer.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **pot_transfer.treasury**
      * - `int65type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    treasury?: c.PgInt65type | db.Parameter<c.PgInt65type> | db.SQLFragment | db.SQLFragment<any, c.PgInt65type | db.Parameter<c.PgInt65type> | db.SQLFragment>;
      /**
      * **pot_transfer.reserves**
      * - `int65type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    reserves?: c.PgInt65type | db.Parameter<c.PgInt65type> | db.SQLFragment | db.SQLFragment<any, c.PgInt65type | db.Parameter<c.PgInt65type> | db.SQLFragment>;
      /**
      * **pot_transfer.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'pot_transfer_pkey' | 'unique_pot_transfer';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **redeemer**
   * - Table in database
   */
  export namespace redeemer {
    export type Table = 'redeemer';
    export interface Selectable {
      /**
      * **redeemer.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('redeemer_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **redeemer.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: db.Int8String;
      /**
      * **redeemer.unit_mem**
      * - `word63type` (base type: `int8`) in database
      * - `NOT NULL`, no default
      */
    unit_mem: c.PgWord63type;
      /**
      * **redeemer.unit_steps**
      * - `word63type` (base type: `int8`) in database
      * - `NOT NULL`, no default
      */
    unit_steps: c.PgWord63type;
      /**
      * **redeemer.fee**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    fee: c.PgLovelace;
      /**
      * **redeemer.purpose**
      * - `scriptpurposetype` in database
      * - `NOT NULL`, no default
      */
    purpose: scriptpurposetype;
      /**
      * **redeemer.index**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    index: c.PgUinteger;
      /**
      * **redeemer.script_hash**
      * - `hash28type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    script_hash: c.PgHash28type | null;
      /**
      * **redeemer.datum_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    datum_id: db.Int8String;
    }
    export interface JSONSelectable {
      /**
      * **redeemer.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('redeemer_id_seq'::regclass)`
      */
    id: number;
      /**
      * **redeemer.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: number;
      /**
      * **redeemer.unit_mem**
      * - `word63type` (base type: `int8`) in database
      * - `NOT NULL`, no default
      */
    unit_mem: c.PgWord63type;
      /**
      * **redeemer.unit_steps**
      * - `word63type` (base type: `int8`) in database
      * - `NOT NULL`, no default
      */
    unit_steps: c.PgWord63type;
      /**
      * **redeemer.fee**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    fee: c.PgLovelace;
      /**
      * **redeemer.purpose**
      * - `scriptpurposetype` in database
      * - `NOT NULL`, no default
      */
    purpose: scriptpurposetype;
      /**
      * **redeemer.index**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    index: c.PgUinteger;
      /**
      * **redeemer.script_hash**
      * - `hash28type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    script_hash: c.PgHash28type | null;
      /**
      * **redeemer.datum_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    datum_id: number;
    }
    export interface Whereable {
      /**
      * **redeemer.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('redeemer_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **redeemer.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **redeemer.unit_mem**
      * - `word63type` (base type: `int8`) in database
      * - `NOT NULL`, no default
      */
    unit_mem?: c.PgWord63type | db.Parameter<c.PgWord63type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgWord63type | db.Parameter<c.PgWord63type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **redeemer.unit_steps**
      * - `word63type` (base type: `int8`) in database
      * - `NOT NULL`, no default
      */
    unit_steps?: c.PgWord63type | db.Parameter<c.PgWord63type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgWord63type | db.Parameter<c.PgWord63type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **redeemer.fee**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    fee?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn>;
      /**
      * **redeemer.purpose**
      * - `scriptpurposetype` in database
      * - `NOT NULL`, no default
      */
    purpose?: scriptpurposetype | db.Parameter<scriptpurposetype> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, scriptpurposetype | db.Parameter<scriptpurposetype> | db.SQLFragment | db.ParentColumn>;
      /**
      * **redeemer.index**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    index?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **redeemer.script_hash**
      * - `hash28type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    script_hash?: c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **redeemer.datum_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    datum_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **redeemer.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('redeemer_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **redeemer.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **redeemer.unit_mem**
      * - `word63type` (base type: `int8`) in database
      * - `NOT NULL`, no default
      */
    unit_mem: c.PgWord63type | db.Parameter<c.PgWord63type> | db.SQLFragment;
      /**
      * **redeemer.unit_steps**
      * - `word63type` (base type: `int8`) in database
      * - `NOT NULL`, no default
      */
    unit_steps: c.PgWord63type | db.Parameter<c.PgWord63type> | db.SQLFragment;
      /**
      * **redeemer.fee**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    fee: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment;
      /**
      * **redeemer.purpose**
      * - `scriptpurposetype` in database
      * - `NOT NULL`, no default
      */
    purpose: scriptpurposetype | db.Parameter<scriptpurposetype> | db.SQLFragment;
      /**
      * **redeemer.index**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    index: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment;
      /**
      * **redeemer.script_hash**
      * - `hash28type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    script_hash?: c.PgHash28type | db.Parameter<c.PgHash28type> | null | db.DefaultType | db.SQLFragment;
      /**
      * **redeemer.datum_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    datum_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **redeemer.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('redeemer_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **redeemer.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **redeemer.unit_mem**
      * - `word63type` (base type: `int8`) in database
      * - `NOT NULL`, no default
      */
    unit_mem?: c.PgWord63type | db.Parameter<c.PgWord63type> | db.SQLFragment | db.SQLFragment<any, c.PgWord63type | db.Parameter<c.PgWord63type> | db.SQLFragment>;
      /**
      * **redeemer.unit_steps**
      * - `word63type` (base type: `int8`) in database
      * - `NOT NULL`, no default
      */
    unit_steps?: c.PgWord63type | db.Parameter<c.PgWord63type> | db.SQLFragment | db.SQLFragment<any, c.PgWord63type | db.Parameter<c.PgWord63type> | db.SQLFragment>;
      /**
      * **redeemer.fee**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    fee?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment>;
      /**
      * **redeemer.purpose**
      * - `scriptpurposetype` in database
      * - `NOT NULL`, no default
      */
    purpose?: scriptpurposetype | db.Parameter<scriptpurposetype> | db.SQLFragment | db.SQLFragment<any, scriptpurposetype | db.Parameter<scriptpurposetype> | db.SQLFragment>;
      /**
      * **redeemer.index**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    index?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment>;
      /**
      * **redeemer.script_hash**
      * - `hash28type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    script_hash?: c.PgHash28type | db.Parameter<c.PgHash28type> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgHash28type | db.Parameter<c.PgHash28type> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **redeemer.datum_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    datum_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'redeemer_pkey' | 'unique_redeemer';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **reserve**
   * - Table in database
   */
  export namespace reserve {
    export type Table = 'reserve';
    export interface Selectable {
      /**
      * **reserve.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('reserve_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **reserve.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id: db.Int8String;
      /**
      * **reserve.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index: number;
      /**
      * **reserve.amount**
      * - `int65type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    amount: c.PgInt65type;
      /**
      * **reserve.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: db.Int8String;
    }
    export interface JSONSelectable {
      /**
      * **reserve.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('reserve_id_seq'::regclass)`
      */
    id: number;
      /**
      * **reserve.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id: number;
      /**
      * **reserve.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index: number;
      /**
      * **reserve.amount**
      * - `int65type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    amount: c.PgInt65type;
      /**
      * **reserve.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: number;
    }
    export interface Whereable {
      /**
      * **reserve.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('reserve_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **reserve.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **reserve.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **reserve.amount**
      * - `int65type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    amount?: c.PgInt65type | db.Parameter<c.PgInt65type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgInt65type | db.Parameter<c.PgInt65type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **reserve.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **reserve.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('reserve_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **reserve.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **reserve.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **reserve.amount**
      * - `int65type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    amount: c.PgInt65type | db.Parameter<c.PgInt65type> | db.SQLFragment;
      /**
      * **reserve.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **reserve.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('reserve_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **reserve.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **reserve.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **reserve.amount**
      * - `int65type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    amount?: c.PgInt65type | db.Parameter<c.PgInt65type> | db.SQLFragment | db.SQLFragment<any, c.PgInt65type | db.Parameter<c.PgInt65type> | db.SQLFragment>;
      /**
      * **reserve.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'reserve_pkey' | 'unique_reserves';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **reserved_pool_ticker**
   * - Table in database
   */
  export namespace reserved_pool_ticker {
    export type Table = 'reserved_pool_ticker';
    export interface Selectable {
      /**
      * **reserved_pool_ticker.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('reserved_pool_ticker_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **reserved_pool_ticker.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    name: string;
      /**
      * **reserved_pool_ticker.pool_hash**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    pool_hash: c.PgHash28type;
    }
    export interface JSONSelectable {
      /**
      * **reserved_pool_ticker.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('reserved_pool_ticker_id_seq'::regclass)`
      */
    id: number;
      /**
      * **reserved_pool_ticker.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    name: string;
      /**
      * **reserved_pool_ticker.pool_hash**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    pool_hash: c.PgHash28type;
    }
    export interface Whereable {
      /**
      * **reserved_pool_ticker.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('reserved_pool_ticker_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **reserved_pool_ticker.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **reserved_pool_ticker.pool_hash**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    pool_hash?: c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **reserved_pool_ticker.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('reserved_pool_ticker_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **reserved_pool_ticker.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **reserved_pool_ticker.pool_hash**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    pool_hash: c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **reserved_pool_ticker.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('reserved_pool_ticker_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **reserved_pool_ticker.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **reserved_pool_ticker.pool_hash**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    pool_hash?: c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment | db.SQLFragment<any, c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment>;
    }
    export type UniqueIndex = 'reserved_pool_ticker_pkey' | 'unique_reserved_pool_ticker';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **reward**
   * - Table in database
   */
  export namespace reward {
    export type Table = 'reward';
    export interface Selectable {
      /**
      * **reward.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('reward_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **reward.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id: db.Int8String;
      /**
      * **reward.type**
      * - `rewardtype` in database
      * - `NOT NULL`, no default
      */
    type: rewardtype;
      /**
      * **reward.amount**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    amount: c.PgLovelace;
      /**
      * **reward.earned_epoch**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    earned_epoch: db.Int8String;
      /**
      * **reward.spendable_epoch**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    spendable_epoch: db.Int8String;
      /**
      * **reward.pool_id**
      * - `int8` in database
      * - Nullable, no default
      */
    pool_id: db.Int8String | null;
    }
    export interface JSONSelectable {
      /**
      * **reward.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('reward_id_seq'::regclass)`
      */
    id: number;
      /**
      * **reward.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id: number;
      /**
      * **reward.type**
      * - `rewardtype` in database
      * - `NOT NULL`, no default
      */
    type: rewardtype;
      /**
      * **reward.amount**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    amount: c.PgLovelace;
      /**
      * **reward.earned_epoch**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    earned_epoch: number;
      /**
      * **reward.spendable_epoch**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    spendable_epoch: number;
      /**
      * **reward.pool_id**
      * - `int8` in database
      * - Nullable, no default
      */
    pool_id: number | null;
    }
    export interface Whereable {
      /**
      * **reward.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('reward_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **reward.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **reward.type**
      * - `rewardtype` in database
      * - `NOT NULL`, no default
      */
    type?: rewardtype | db.Parameter<rewardtype> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, rewardtype | db.Parameter<rewardtype> | db.SQLFragment | db.ParentColumn>;
      /**
      * **reward.amount**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    amount?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn>;
      /**
      * **reward.earned_epoch**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    earned_epoch?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **reward.spendable_epoch**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    spendable_epoch?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **reward.pool_id**
      * - `int8` in database
      * - Nullable, no default
      */
    pool_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **reward.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('reward_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **reward.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **reward.type**
      * - `rewardtype` in database
      * - `NOT NULL`, no default
      */
    type: rewardtype | db.Parameter<rewardtype> | db.SQLFragment;
      /**
      * **reward.amount**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    amount: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment;
      /**
      * **reward.earned_epoch**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    earned_epoch: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **reward.spendable_epoch**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    spendable_epoch: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **reward.pool_id**
      * - `int8` in database
      * - Nullable, no default
      */
    pool_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **reward.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('reward_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **reward.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **reward.type**
      * - `rewardtype` in database
      * - `NOT NULL`, no default
      */
    type?: rewardtype | db.Parameter<rewardtype> | db.SQLFragment | db.SQLFragment<any, rewardtype | db.Parameter<rewardtype> | db.SQLFragment>;
      /**
      * **reward.amount**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    amount?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment>;
      /**
      * **reward.earned_epoch**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    earned_epoch?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **reward.spendable_epoch**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    spendable_epoch?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **reward.pool_id**
      * - `int8` in database
      * - Nullable, no default
      */
    pool_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'reward_pkey' | 'unique_reward';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **schema_version**
   * - Table in database
   */
  export namespace schema_version {
    export type Table = 'schema_version';
    export interface Selectable {
      /**
      * **schema_version.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('schema_version_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **schema_version.stage_one**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    stage_one: db.Int8String;
      /**
      * **schema_version.stage_two**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    stage_two: db.Int8String;
      /**
      * **schema_version.stage_three**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    stage_three: db.Int8String;
    }
    export interface JSONSelectable {
      /**
      * **schema_version.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('schema_version_id_seq'::regclass)`
      */
    id: number;
      /**
      * **schema_version.stage_one**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    stage_one: number;
      /**
      * **schema_version.stage_two**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    stage_two: number;
      /**
      * **schema_version.stage_three**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    stage_three: number;
    }
    export interface Whereable {
      /**
      * **schema_version.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('schema_version_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **schema_version.stage_one**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    stage_one?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **schema_version.stage_two**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    stage_two?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **schema_version.stage_three**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    stage_three?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **schema_version.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('schema_version_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **schema_version.stage_one**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    stage_one: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **schema_version.stage_two**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    stage_two: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **schema_version.stage_three**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    stage_three: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **schema_version.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('schema_version_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **schema_version.stage_one**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    stage_one?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **schema_version.stage_two**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    stage_two?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **schema_version.stage_three**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    stage_three?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'schema_version_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **script**
   * - Table in database
   */
  export namespace script {
    export type Table = 'script';
    export interface Selectable {
      /**
      * **script.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('script_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **script.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: db.Int8String;
      /**
      * **script.hash**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash: c.PgHash28type;
      /**
      * **script.type**
      * - `scripttype` in database
      * - `NOT NULL`, no default
      */
    type: scripttype;
      /**
      * **script.json**
      * - `jsonb` in database
      * - Nullable, no default
      */
    json: db.JSONValue | null;
      /**
      * **script.bytes**
      * - `bytea` in database
      * - Nullable, no default
      */
    bytes: Buffer | null;
      /**
      * **script.serialised_size**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    serialised_size: c.PgUinteger | null;
    }
    export interface JSONSelectable {
      /**
      * **script.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('script_id_seq'::regclass)`
      */
    id: number;
      /**
      * **script.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: number;
      /**
      * **script.hash**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash: c.PgHash28type;
      /**
      * **script.type**
      * - `scripttype` in database
      * - `NOT NULL`, no default
      */
    type: scripttype;
      /**
      * **script.json**
      * - `jsonb` in database
      * - Nullable, no default
      */
    json: db.JSONValue | null;
      /**
      * **script.bytes**
      * - `bytea` in database
      * - Nullable, no default
      */
    bytes: db.ByteArrayString | null;
      /**
      * **script.serialised_size**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    serialised_size: c.PgUinteger | null;
    }
    export interface Whereable {
      /**
      * **script.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('script_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **script.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **script.hash**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash?: c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **script.type**
      * - `scripttype` in database
      * - `NOT NULL`, no default
      */
    type?: scripttype | db.Parameter<scripttype> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, scripttype | db.Parameter<scripttype> | db.SQLFragment | db.ParentColumn>;
      /**
      * **script.json**
      * - `jsonb` in database
      * - Nullable, no default
      */
    json?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      /**
      * **script.bytes**
      * - `bytea` in database
      * - Nullable, no default
      */
    bytes?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **script.serialised_size**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    serialised_size?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **script.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('script_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **script.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **script.hash**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash: c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment;
      /**
      * **script.type**
      * - `scripttype` in database
      * - `NOT NULL`, no default
      */
    type: scripttype | db.Parameter<scripttype> | db.SQLFragment;
      /**
      * **script.json**
      * - `jsonb` in database
      * - Nullable, no default
      */
    json?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment;
      /**
      * **script.bytes**
      * - `bytea` in database
      * - Nullable, no default
      */
    bytes?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **script.serialised_size**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    serialised_size?: c.PgUinteger | db.Parameter<c.PgUinteger> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **script.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('script_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **script.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **script.hash**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash?: c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment | db.SQLFragment<any, c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment>;
      /**
      * **script.type**
      * - `scripttype` in database
      * - `NOT NULL`, no default
      */
    type?: scripttype | db.Parameter<scripttype> | db.SQLFragment | db.SQLFragment<any, scripttype | db.Parameter<scripttype> | db.SQLFragment>;
      /**
      * **script.json**
      * - `jsonb` in database
      * - Nullable, no default
      */
    json?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **script.bytes**
      * - `bytea` in database
      * - Nullable, no default
      */
    bytes?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **script.serialised_size**
      * - `uinteger` (base type: `int4`) in database
      * - Nullable, no default
      */
    serialised_size?: c.PgUinteger | db.Parameter<c.PgUinteger> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'script_pkey' | 'unique_script';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **slot_leader**
   * - Table in database
   */
  export namespace slot_leader {
    export type Table = 'slot_leader';
    export interface Selectable {
      /**
      * **slot_leader.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('slot_leader_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **slot_leader.hash**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash: c.PgHash28type;
      /**
      * **slot_leader.pool_hash_id**
      * - `int8` in database
      * - Nullable, no default
      */
    pool_hash_id: db.Int8String | null;
      /**
      * **slot_leader.description**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    description: string;
    }
    export interface JSONSelectable {
      /**
      * **slot_leader.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('slot_leader_id_seq'::regclass)`
      */
    id: number;
      /**
      * **slot_leader.hash**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash: c.PgHash28type;
      /**
      * **slot_leader.pool_hash_id**
      * - `int8` in database
      * - Nullable, no default
      */
    pool_hash_id: number | null;
      /**
      * **slot_leader.description**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    description: string;
    }
    export interface Whereable {
      /**
      * **slot_leader.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('slot_leader_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **slot_leader.hash**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash?: c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **slot_leader.pool_hash_id**
      * - `int8` in database
      * - Nullable, no default
      */
    pool_hash_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **slot_leader.description**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **slot_leader.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('slot_leader_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **slot_leader.hash**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash: c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment;
      /**
      * **slot_leader.pool_hash_id**
      * - `int8` in database
      * - Nullable, no default
      */
    pool_hash_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **slot_leader.description**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    description: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **slot_leader.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('slot_leader_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **slot_leader.hash**
      * - `hash28type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash?: c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment | db.SQLFragment<any, c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment>;
      /**
      * **slot_leader.pool_hash_id**
      * - `int8` in database
      * - Nullable, no default
      */
    pool_hash_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **slot_leader.description**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    description?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'slot_leader_pkey' | 'unique_slot_leader';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **stake_address**
   * - Table in database
   */
  export namespace stake_address {
    export type Table = 'stake_address';
    export interface Selectable {
      /**
      * **stake_address.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('stake_address_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **stake_address.hash_raw**
      * - `addr29type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash_raw: c.PgAddr29type;
      /**
      * **stake_address.view**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    view: string;
      /**
      * **stake_address.script_hash**
      * - `hash28type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    script_hash: c.PgHash28type | null;
      /**
      * **stake_address.registered_tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    registered_tx_id: db.Int8String;
    }
    export interface JSONSelectable {
      /**
      * **stake_address.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('stake_address_id_seq'::regclass)`
      */
    id: number;
      /**
      * **stake_address.hash_raw**
      * - `addr29type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash_raw: c.PgAddr29type;
      /**
      * **stake_address.view**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    view: string;
      /**
      * **stake_address.script_hash**
      * - `hash28type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    script_hash: c.PgHash28type | null;
      /**
      * **stake_address.registered_tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    registered_tx_id: number;
    }
    export interface Whereable {
      /**
      * **stake_address.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('stake_address_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stake_address.hash_raw**
      * - `addr29type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash_raw?: c.PgAddr29type | db.Parameter<c.PgAddr29type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgAddr29type | db.Parameter<c.PgAddr29type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stake_address.view**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    view?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stake_address.script_hash**
      * - `hash28type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    script_hash?: c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stake_address.registered_tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    registered_tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **stake_address.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('stake_address_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **stake_address.hash_raw**
      * - `addr29type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash_raw: c.PgAddr29type | db.Parameter<c.PgAddr29type> | db.SQLFragment;
      /**
      * **stake_address.view**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    view: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **stake_address.script_hash**
      * - `hash28type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    script_hash?: c.PgHash28type | db.Parameter<c.PgHash28type> | null | db.DefaultType | db.SQLFragment;
      /**
      * **stake_address.registered_tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    registered_tx_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **stake_address.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('stake_address_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **stake_address.hash_raw**
      * - `addr29type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash_raw?: c.PgAddr29type | db.Parameter<c.PgAddr29type> | db.SQLFragment | db.SQLFragment<any, c.PgAddr29type | db.Parameter<c.PgAddr29type> | db.SQLFragment>;
      /**
      * **stake_address.view**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    view?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **stake_address.script_hash**
      * - `hash28type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    script_hash?: c.PgHash28type | db.Parameter<c.PgHash28type> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgHash28type | db.Parameter<c.PgHash28type> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **stake_address.registered_tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    registered_tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'stake_address_pkey' | 'unique_stake_address';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **stake_deregistration**
   * - Table in database
   */
  export namespace stake_deregistration {
    export type Table = 'stake_deregistration';
    export interface Selectable {
      /**
      * **stake_deregistration.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('stake_deregistration_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **stake_deregistration.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id: db.Int8String;
      /**
      * **stake_deregistration.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index: number;
      /**
      * **stake_deregistration.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    epoch_no: c.PgUinteger;
      /**
      * **stake_deregistration.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: db.Int8String;
      /**
      * **stake_deregistration.redeemer_id**
      * - `int8` in database
      * - Nullable, no default
      */
    redeemer_id: db.Int8String | null;
    }
    export interface JSONSelectable {
      /**
      * **stake_deregistration.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('stake_deregistration_id_seq'::regclass)`
      */
    id: number;
      /**
      * **stake_deregistration.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id: number;
      /**
      * **stake_deregistration.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index: number;
      /**
      * **stake_deregistration.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    epoch_no: c.PgUinteger;
      /**
      * **stake_deregistration.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: number;
      /**
      * **stake_deregistration.redeemer_id**
      * - `int8` in database
      * - Nullable, no default
      */
    redeemer_id: number | null;
    }
    export interface Whereable {
      /**
      * **stake_deregistration.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('stake_deregistration_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stake_deregistration.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stake_deregistration.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stake_deregistration.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    epoch_no?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stake_deregistration.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stake_deregistration.redeemer_id**
      * - `int8` in database
      * - Nullable, no default
      */
    redeemer_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **stake_deregistration.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('stake_deregistration_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **stake_deregistration.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **stake_deregistration.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **stake_deregistration.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    epoch_no: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment;
      /**
      * **stake_deregistration.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **stake_deregistration.redeemer_id**
      * - `int8` in database
      * - Nullable, no default
      */
    redeemer_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **stake_deregistration.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('stake_deregistration_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **stake_deregistration.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **stake_deregistration.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **stake_deregistration.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    epoch_no?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment>;
      /**
      * **stake_deregistration.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **stake_deregistration.redeemer_id**
      * - `int8` in database
      * - Nullable, no default
      */
    redeemer_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'stake_deregistration_pkey' | 'unique_stake_deregistration';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **stake_registration**
   * - Table in database
   */
  export namespace stake_registration {
    export type Table = 'stake_registration';
    export interface Selectable {
      /**
      * **stake_registration.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('stake_registration_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **stake_registration.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id: db.Int8String;
      /**
      * **stake_registration.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index: number;
      /**
      * **stake_registration.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    epoch_no: c.PgUinteger;
      /**
      * **stake_registration.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: db.Int8String;
    }
    export interface JSONSelectable {
      /**
      * **stake_registration.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('stake_registration_id_seq'::regclass)`
      */
    id: number;
      /**
      * **stake_registration.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id: number;
      /**
      * **stake_registration.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index: number;
      /**
      * **stake_registration.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    epoch_no: c.PgUinteger;
      /**
      * **stake_registration.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: number;
    }
    export interface Whereable {
      /**
      * **stake_registration.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('stake_registration_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stake_registration.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stake_registration.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stake_registration.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    epoch_no?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stake_registration.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **stake_registration.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('stake_registration_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **stake_registration.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **stake_registration.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **stake_registration.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    epoch_no: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment;
      /**
      * **stake_registration.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **stake_registration.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('stake_registration_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **stake_registration.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **stake_registration.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **stake_registration.epoch_no**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    epoch_no?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment>;
      /**
      * **stake_registration.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'stake_registration_pkey' | 'unique_stake_registration';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **treasury**
   * - Table in database
   */
  export namespace treasury {
    export type Table = 'treasury';
    export interface Selectable {
      /**
      * **treasury.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('treasury_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **treasury.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id: db.Int8String;
      /**
      * **treasury.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index: number;
      /**
      * **treasury.amount**
      * - `int65type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    amount: c.PgInt65type;
      /**
      * **treasury.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: db.Int8String;
    }
    export interface JSONSelectable {
      /**
      * **treasury.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('treasury_id_seq'::regclass)`
      */
    id: number;
      /**
      * **treasury.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id: number;
      /**
      * **treasury.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index: number;
      /**
      * **treasury.amount**
      * - `int65type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    amount: c.PgInt65type;
      /**
      * **treasury.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: number;
    }
    export interface Whereable {
      /**
      * **treasury.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('treasury_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **treasury.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **treasury.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **treasury.amount**
      * - `int65type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    amount?: c.PgInt65type | db.Parameter<c.PgInt65type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgInt65type | db.Parameter<c.PgInt65type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **treasury.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **treasury.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('treasury_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **treasury.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **treasury.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **treasury.amount**
      * - `int65type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    amount: c.PgInt65type | db.Parameter<c.PgInt65type> | db.SQLFragment;
      /**
      * **treasury.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **treasury.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('treasury_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **treasury.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **treasury.cert_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    cert_index?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **treasury.amount**
      * - `int65type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    amount?: c.PgInt65type | db.Parameter<c.PgInt65type> | db.SQLFragment | db.SQLFragment<any, c.PgInt65type | db.Parameter<c.PgInt65type> | db.SQLFragment>;
      /**
      * **treasury.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'treasury_pkey' | 'unique_treasury';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **tx**
   * - Table in database
   */
  export namespace tx {
    export type Table = 'tx';
    export interface Selectable {
      /**
      * **tx.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('tx_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **tx.hash**
      * - `hash32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash: c.PgHash32type;
      /**
      * **tx.block_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    block_id: db.Int8String;
      /**
      * **tx.block_index**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    block_index: c.PgUinteger;
      /**
      * **tx.out_sum**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    out_sum: c.PgLovelace;
      /**
      * **tx.fee**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    fee: c.PgLovelace;
      /**
      * **tx.deposit**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    deposit: db.Int8String;
      /**
      * **tx.size**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    size: c.PgUinteger;
      /**
      * **tx.invalid_before**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    invalid_before: c.PgWord64type | null;
      /**
      * **tx.invalid_hereafter**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    invalid_hereafter: c.PgWord64type | null;
      /**
      * **tx.valid_contract**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
    valid_contract: boolean;
      /**
      * **tx.script_size**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    script_size: c.PgUinteger;
    }
    export interface JSONSelectable {
      /**
      * **tx.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('tx_id_seq'::regclass)`
      */
    id: number;
      /**
      * **tx.hash**
      * - `hash32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash: c.PgHash32type;
      /**
      * **tx.block_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    block_id: number;
      /**
      * **tx.block_index**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    block_index: c.PgUinteger;
      /**
      * **tx.out_sum**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    out_sum: c.PgLovelace;
      /**
      * **tx.fee**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    fee: c.PgLovelace;
      /**
      * **tx.deposit**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    deposit: number;
      /**
      * **tx.size**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    size: c.PgUinteger;
      /**
      * **tx.invalid_before**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    invalid_before: c.PgWord64type | null;
      /**
      * **tx.invalid_hereafter**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    invalid_hereafter: c.PgWord64type | null;
      /**
      * **tx.valid_contract**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
    valid_contract: boolean;
      /**
      * **tx.script_size**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    script_size: c.PgUinteger;
    }
    export interface Whereable {
      /**
      * **tx.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('tx_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tx.hash**
      * - `hash32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash?: c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tx.block_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    block_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tx.block_index**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    block_index?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tx.out_sum**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    out_sum?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tx.fee**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    fee?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tx.deposit**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    deposit?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tx.size**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    size?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tx.invalid_before**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    invalid_before?: c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tx.invalid_hereafter**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    invalid_hereafter?: c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tx.valid_contract**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
    valid_contract?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tx.script_size**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    script_size?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **tx.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('tx_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **tx.hash**
      * - `hash32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash: c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment;
      /**
      * **tx.block_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    block_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **tx.block_index**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    block_index: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment;
      /**
      * **tx.out_sum**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    out_sum: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment;
      /**
      * **tx.fee**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    fee: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment;
      /**
      * **tx.deposit**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    deposit: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **tx.size**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    size: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment;
      /**
      * **tx.invalid_before**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    invalid_before?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment;
      /**
      * **tx.invalid_hereafter**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    invalid_hereafter?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment;
      /**
      * **tx.valid_contract**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
    valid_contract: boolean | db.Parameter<boolean> | db.SQLFragment;
      /**
      * **tx.script_size**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    script_size: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **tx.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('tx_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **tx.hash**
      * - `hash32type` (base type: `bytea`) in database
      * - `NOT NULL`, no default
      */
    hash?: c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment | db.SQLFragment<any, c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment>;
      /**
      * **tx.block_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    block_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **tx.block_index**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    block_index?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment>;
      /**
      * **tx.out_sum**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    out_sum?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment>;
      /**
      * **tx.fee**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    fee?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment>;
      /**
      * **tx.deposit**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    deposit?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **tx.size**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    size?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment>;
      /**
      * **tx.invalid_before**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    invalid_before?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **tx.invalid_hereafter**
      * - `word64type` (base type: `numeric`) in database
      * - Nullable, no default
      */
    invalid_hereafter?: c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **tx.valid_contract**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
    valid_contract?: boolean | db.Parameter<boolean> | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment>;
      /**
      * **tx.script_size**
      * - `uinteger` (base type: `int4`) in database
      * - `NOT NULL`, no default
      */
    script_size?: c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment | db.SQLFragment<any, c.PgUinteger | db.Parameter<c.PgUinteger> | db.SQLFragment>;
    }
    export type UniqueIndex = 'tx_pkey' | 'unique_tx';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **tx_in**
   * - Table in database
   */
  export namespace tx_in {
    export type Table = 'tx_in';
    export interface Selectable {
      /**
      * **tx_in.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('tx_in_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **tx_in.tx_in_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_in_id: db.Int8String;
      /**
      * **tx_in.tx_out_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_out_id: db.Int8String;
      /**
      * **tx_in.tx_out_index**
      * - `txindex` (base type: `int2`) in database
      * - `NOT NULL`, no default
      */
    tx_out_index: c.PgTxindex;
      /**
      * **tx_in.redeemer_id**
      * - `int8` in database
      * - Nullable, no default
      */
    redeemer_id: db.Int8String | null;
    }
    export interface JSONSelectable {
      /**
      * **tx_in.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('tx_in_id_seq'::regclass)`
      */
    id: number;
      /**
      * **tx_in.tx_in_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_in_id: number;
      /**
      * **tx_in.tx_out_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_out_id: number;
      /**
      * **tx_in.tx_out_index**
      * - `txindex` (base type: `int2`) in database
      * - `NOT NULL`, no default
      */
    tx_out_index: c.PgTxindex;
      /**
      * **tx_in.redeemer_id**
      * - `int8` in database
      * - Nullable, no default
      */
    redeemer_id: number | null;
    }
    export interface Whereable {
      /**
      * **tx_in.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('tx_in_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tx_in.tx_in_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_in_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tx_in.tx_out_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_out_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tx_in.tx_out_index**
      * - `txindex` (base type: `int2`) in database
      * - `NOT NULL`, no default
      */
    tx_out_index?: c.PgTxindex | db.Parameter<c.PgTxindex> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgTxindex | db.Parameter<c.PgTxindex> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tx_in.redeemer_id**
      * - `int8` in database
      * - Nullable, no default
      */
    redeemer_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **tx_in.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('tx_in_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **tx_in.tx_in_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_in_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **tx_in.tx_out_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_out_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **tx_in.tx_out_index**
      * - `txindex` (base type: `int2`) in database
      * - `NOT NULL`, no default
      */
    tx_out_index: c.PgTxindex | db.Parameter<c.PgTxindex> | db.SQLFragment;
      /**
      * **tx_in.redeemer_id**
      * - `int8` in database
      * - Nullable, no default
      */
    redeemer_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **tx_in.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('tx_in_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **tx_in.tx_in_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_in_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **tx_in.tx_out_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_out_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **tx_in.tx_out_index**
      * - `txindex` (base type: `int2`) in database
      * - `NOT NULL`, no default
      */
    tx_out_index?: c.PgTxindex | db.Parameter<c.PgTxindex> | db.SQLFragment | db.SQLFragment<any, c.PgTxindex | db.Parameter<c.PgTxindex> | db.SQLFragment>;
      /**
      * **tx_in.redeemer_id**
      * - `int8` in database
      * - Nullable, no default
      */
    redeemer_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'tx_in_pkey' | 'unique_txin';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **tx_metadata**
   * - Table in database
   */
  export namespace tx_metadata {
    export type Table = 'tx_metadata';
    export interface Selectable {
      /**
      * **tx_metadata.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('tx_metadata_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **tx_metadata.key**
      * - `word64type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    key: c.PgWord64type;
      /**
      * **tx_metadata.json**
      * - `jsonb` in database
      * - Nullable, no default
      */
    json: db.JSONValue | null;
      /**
      * **tx_metadata.bytes**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
    bytes: Buffer;
      /**
      * **tx_metadata.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: db.Int8String;
    }
    export interface JSONSelectable {
      /**
      * **tx_metadata.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('tx_metadata_id_seq'::regclass)`
      */
    id: number;
      /**
      * **tx_metadata.key**
      * - `word64type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    key: c.PgWord64type;
      /**
      * **tx_metadata.json**
      * - `jsonb` in database
      * - Nullable, no default
      */
    json: db.JSONValue | null;
      /**
      * **tx_metadata.bytes**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
    bytes: db.ByteArrayString;
      /**
      * **tx_metadata.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: number;
    }
    export interface Whereable {
      /**
      * **tx_metadata.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('tx_metadata_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tx_metadata.key**
      * - `word64type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    key?: c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tx_metadata.json**
      * - `jsonb` in database
      * - Nullable, no default
      */
    json?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tx_metadata.bytes**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
    bytes?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tx_metadata.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **tx_metadata.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('tx_metadata_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **tx_metadata.key**
      * - `word64type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    key: c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment;
      /**
      * **tx_metadata.json**
      * - `jsonb` in database
      * - Nullable, no default
      */
    json?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment;
      /**
      * **tx_metadata.bytes**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
    bytes: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment;
      /**
      * **tx_metadata.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **tx_metadata.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('tx_metadata_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **tx_metadata.key**
      * - `word64type` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    key?: c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment | db.SQLFragment<any, c.PgWord64type | db.Parameter<c.PgWord64type> | db.SQLFragment>;
      /**
      * **tx_metadata.json**
      * - `jsonb` in database
      * - Nullable, no default
      */
    json?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **tx_metadata.bytes**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
    bytes?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment>;
      /**
      * **tx_metadata.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'tx_metadata_pkey' | 'unique_tx_metadata';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **tx_out**
   * - Table in database
   */
  export namespace tx_out {
    export type Table = 'tx_out';
    export interface Selectable {
      /**
      * **tx_out.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('tx_out_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **tx_out.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: db.Int8String;
      /**
      * **tx_out.index**
      * - `txindex` (base type: `int2`) in database
      * - `NOT NULL`, no default
      */
    index: c.PgTxindex;
      /**
      * **tx_out.address**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    address: string;
      /**
      * **tx_out.address_raw**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
    address_raw: Buffer;
      /**
      * **tx_out.address_has_script**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
    address_has_script: boolean;
      /**
      * **tx_out.payment_cred**
      * - `hash28type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    payment_cred: c.PgHash28type | null;
      /**
      * **tx_out.stake_address_id**
      * - `int8` in database
      * - Nullable, no default
      */
    stake_address_id: db.Int8String | null;
      /**
      * **tx_out.value**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    value: c.PgLovelace;
      /**
      * **tx_out.data_hash**
      * - `hash32type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    data_hash: c.PgHash32type | null;
    }
    export interface JSONSelectable {
      /**
      * **tx_out.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('tx_out_id_seq'::regclass)`
      */
    id: number;
      /**
      * **tx_out.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: number;
      /**
      * **tx_out.index**
      * - `txindex` (base type: `int2`) in database
      * - `NOT NULL`, no default
      */
    index: c.PgTxindex;
      /**
      * **tx_out.address**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    address: string;
      /**
      * **tx_out.address_raw**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
    address_raw: db.ByteArrayString;
      /**
      * **tx_out.address_has_script**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
    address_has_script: boolean;
      /**
      * **tx_out.payment_cred**
      * - `hash28type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    payment_cred: c.PgHash28type | null;
      /**
      * **tx_out.stake_address_id**
      * - `int8` in database
      * - Nullable, no default
      */
    stake_address_id: number | null;
      /**
      * **tx_out.value**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    value: c.PgLovelace;
      /**
      * **tx_out.data_hash**
      * - `hash32type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    data_hash: c.PgHash32type | null;
    }
    export interface Whereable {
      /**
      * **tx_out.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('tx_out_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tx_out.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tx_out.index**
      * - `txindex` (base type: `int2`) in database
      * - `NOT NULL`, no default
      */
    index?: c.PgTxindex | db.Parameter<c.PgTxindex> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgTxindex | db.Parameter<c.PgTxindex> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tx_out.address**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    address?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tx_out.address_raw**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
    address_raw?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tx_out.address_has_script**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
    address_has_script?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tx_out.payment_cred**
      * - `hash28type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    payment_cred?: c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tx_out.stake_address_id**
      * - `int8` in database
      * - Nullable, no default
      */
    stake_address_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tx_out.value**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    value?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tx_out.data_hash**
      * - `hash32type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    data_hash?: c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **tx_out.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('tx_out_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **tx_out.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **tx_out.index**
      * - `txindex` (base type: `int2`) in database
      * - `NOT NULL`, no default
      */
    index: c.PgTxindex | db.Parameter<c.PgTxindex> | db.SQLFragment;
      /**
      * **tx_out.address**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    address: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **tx_out.address_raw**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
    address_raw: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment;
      /**
      * **tx_out.address_has_script**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
    address_has_script: boolean | db.Parameter<boolean> | db.SQLFragment;
      /**
      * **tx_out.payment_cred**
      * - `hash28type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    payment_cred?: c.PgHash28type | db.Parameter<c.PgHash28type> | null | db.DefaultType | db.SQLFragment;
      /**
      * **tx_out.stake_address_id**
      * - `int8` in database
      * - Nullable, no default
      */
    stake_address_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **tx_out.value**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    value: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment;
      /**
      * **tx_out.data_hash**
      * - `hash32type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    data_hash?: c.PgHash32type | db.Parameter<c.PgHash32type> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **tx_out.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('tx_out_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **tx_out.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **tx_out.index**
      * - `txindex` (base type: `int2`) in database
      * - `NOT NULL`, no default
      */
    index?: c.PgTxindex | db.Parameter<c.PgTxindex> | db.SQLFragment | db.SQLFragment<any, c.PgTxindex | db.Parameter<c.PgTxindex> | db.SQLFragment>;
      /**
      * **tx_out.address**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    address?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **tx_out.address_raw**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
    address_raw?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment>;
      /**
      * **tx_out.address_has_script**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
    address_has_script?: boolean | db.Parameter<boolean> | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment>;
      /**
      * **tx_out.payment_cred**
      * - `hash28type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    payment_cred?: c.PgHash28type | db.Parameter<c.PgHash28type> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgHash28type | db.Parameter<c.PgHash28type> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **tx_out.stake_address_id**
      * - `int8` in database
      * - Nullable, no default
      */
    stake_address_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **tx_out.value**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    value?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment>;
      /**
      * **tx_out.data_hash**
      * - `hash32type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    data_hash?: c.PgHash32type | db.Parameter<c.PgHash32type> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgHash32type | db.Parameter<c.PgHash32type> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'tx_out_pkey' | 'unique_txout';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **utxo_byron_view**
   * - View in database
   */
  export namespace utxo_byron_view {
    export type Table = 'utxo_byron_view';
    export interface Selectable {
      /**
      * **utxo_byron_view.id**
      * - `int8` in database
      * - Nullable, no default
      */
    id: db.Int8String | null;
      /**
      * **utxo_byron_view.tx_id**
      * - `int8` in database
      * - Nullable, no default
      */
    tx_id: db.Int8String | null;
      /**
      * **utxo_byron_view.index**
      * - `txindex` (base type: `int2`) in database
      * - Nullable, no default
      */
    index: c.PgTxindex | null;
      /**
      * **utxo_byron_view.address**
      * - `varchar` in database
      * - Nullable, no default
      */
    address: string | null;
      /**
      * **utxo_byron_view.address_raw**
      * - `bytea` in database
      * - Nullable, no default
      */
    address_raw: Buffer | null;
      /**
      * **utxo_byron_view.address_has_script**
      * - `bool` in database
      * - Nullable, no default
      */
    address_has_script: boolean | null;
      /**
      * **utxo_byron_view.payment_cred**
      * - `hash28type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    payment_cred: c.PgHash28type | null;
      /**
      * **utxo_byron_view.stake_address_id**
      * - `int8` in database
      * - Nullable, no default
      */
    stake_address_id: db.Int8String | null;
      /**
      * **utxo_byron_view.value**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    value: c.PgLovelace | null;
      /**
      * **utxo_byron_view.data_hash**
      * - `hash32type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    data_hash: c.PgHash32type | null;
    }
    export interface JSONSelectable {
      /**
      * **utxo_byron_view.id**
      * - `int8` in database
      * - Nullable, no default
      */
    id: number | null;
      /**
      * **utxo_byron_view.tx_id**
      * - `int8` in database
      * - Nullable, no default
      */
    tx_id: number | null;
      /**
      * **utxo_byron_view.index**
      * - `txindex` (base type: `int2`) in database
      * - Nullable, no default
      */
    index: c.PgTxindex | null;
      /**
      * **utxo_byron_view.address**
      * - `varchar` in database
      * - Nullable, no default
      */
    address: string | null;
      /**
      * **utxo_byron_view.address_raw**
      * - `bytea` in database
      * - Nullable, no default
      */
    address_raw: db.ByteArrayString | null;
      /**
      * **utxo_byron_view.address_has_script**
      * - `bool` in database
      * - Nullable, no default
      */
    address_has_script: boolean | null;
      /**
      * **utxo_byron_view.payment_cred**
      * - `hash28type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    payment_cred: c.PgHash28type | null;
      /**
      * **utxo_byron_view.stake_address_id**
      * - `int8` in database
      * - Nullable, no default
      */
    stake_address_id: number | null;
      /**
      * **utxo_byron_view.value**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    value: c.PgLovelace | null;
      /**
      * **utxo_byron_view.data_hash**
      * - `hash32type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    data_hash: c.PgHash32type | null;
    }
    export interface Whereable {
      /**
      * **utxo_byron_view.id**
      * - `int8` in database
      * - Nullable, no default
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **utxo_byron_view.tx_id**
      * - `int8` in database
      * - Nullable, no default
      */
    tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **utxo_byron_view.index**
      * - `txindex` (base type: `int2`) in database
      * - Nullable, no default
      */
    index?: c.PgTxindex | db.Parameter<c.PgTxindex> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgTxindex | db.Parameter<c.PgTxindex> | db.SQLFragment | db.ParentColumn>;
      /**
      * **utxo_byron_view.address**
      * - `varchar` in database
      * - Nullable, no default
      */
    address?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **utxo_byron_view.address_raw**
      * - `bytea` in database
      * - Nullable, no default
      */
    address_raw?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **utxo_byron_view.address_has_script**
      * - `bool` in database
      * - Nullable, no default
      */
    address_has_script?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **utxo_byron_view.payment_cred**
      * - `hash28type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    payment_cred?: c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **utxo_byron_view.stake_address_id**
      * - `int8` in database
      * - Nullable, no default
      */
    stake_address_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **utxo_byron_view.value**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    value?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn>;
      /**
      * **utxo_byron_view.data_hash**
      * - `hash32type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    data_hash?: c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **utxo_view**
   * - View in database
   */
  export namespace utxo_view {
    export type Table = 'utxo_view';
    export interface Selectable {
      /**
      * **utxo_view.id**
      * - `int8` in database
      * - Nullable, no default
      */
    id: db.Int8String | null;
      /**
      * **utxo_view.tx_id**
      * - `int8` in database
      * - Nullable, no default
      */
    tx_id: db.Int8String | null;
      /**
      * **utxo_view.index**
      * - `txindex` (base type: `int2`) in database
      * - Nullable, no default
      */
    index: c.PgTxindex | null;
      /**
      * **utxo_view.address**
      * - `varchar` in database
      * - Nullable, no default
      */
    address: string | null;
      /**
      * **utxo_view.address_raw**
      * - `bytea` in database
      * - Nullable, no default
      */
    address_raw: Buffer | null;
      /**
      * **utxo_view.address_has_script**
      * - `bool` in database
      * - Nullable, no default
      */
    address_has_script: boolean | null;
      /**
      * **utxo_view.payment_cred**
      * - `hash28type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    payment_cred: c.PgHash28type | null;
      /**
      * **utxo_view.stake_address_id**
      * - `int8` in database
      * - Nullable, no default
      */
    stake_address_id: db.Int8String | null;
      /**
      * **utxo_view.value**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    value: c.PgLovelace | null;
      /**
      * **utxo_view.data_hash**
      * - `hash32type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    data_hash: c.PgHash32type | null;
    }
    export interface JSONSelectable {
      /**
      * **utxo_view.id**
      * - `int8` in database
      * - Nullable, no default
      */
    id: number | null;
      /**
      * **utxo_view.tx_id**
      * - `int8` in database
      * - Nullable, no default
      */
    tx_id: number | null;
      /**
      * **utxo_view.index**
      * - `txindex` (base type: `int2`) in database
      * - Nullable, no default
      */
    index: c.PgTxindex | null;
      /**
      * **utxo_view.address**
      * - `varchar` in database
      * - Nullable, no default
      */
    address: string | null;
      /**
      * **utxo_view.address_raw**
      * - `bytea` in database
      * - Nullable, no default
      */
    address_raw: db.ByteArrayString | null;
      /**
      * **utxo_view.address_has_script**
      * - `bool` in database
      * - Nullable, no default
      */
    address_has_script: boolean | null;
      /**
      * **utxo_view.payment_cred**
      * - `hash28type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    payment_cred: c.PgHash28type | null;
      /**
      * **utxo_view.stake_address_id**
      * - `int8` in database
      * - Nullable, no default
      */
    stake_address_id: number | null;
      /**
      * **utxo_view.value**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    value: c.PgLovelace | null;
      /**
      * **utxo_view.data_hash**
      * - `hash32type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    data_hash: c.PgHash32type | null;
    }
    export interface Whereable {
      /**
      * **utxo_view.id**
      * - `int8` in database
      * - Nullable, no default
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **utxo_view.tx_id**
      * - `int8` in database
      * - Nullable, no default
      */
    tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **utxo_view.index**
      * - `txindex` (base type: `int2`) in database
      * - Nullable, no default
      */
    index?: c.PgTxindex | db.Parameter<c.PgTxindex> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgTxindex | db.Parameter<c.PgTxindex> | db.SQLFragment | db.ParentColumn>;
      /**
      * **utxo_view.address**
      * - `varchar` in database
      * - Nullable, no default
      */
    address?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **utxo_view.address_raw**
      * - `bytea` in database
      * - Nullable, no default
      */
    address_raw?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **utxo_view.address_has_script**
      * - `bool` in database
      * - Nullable, no default
      */
    address_has_script?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **utxo_view.payment_cred**
      * - `hash28type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    payment_cred?: c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgHash28type | db.Parameter<c.PgHash28type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **utxo_view.stake_address_id**
      * - `int8` in database
      * - Nullable, no default
      */
    stake_address_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **utxo_view.value**
      * - `lovelace` (base type: `numeric`) in database
      * - Nullable, no default
      */
    value?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn>;
      /**
      * **utxo_view.data_hash**
      * - `hash32type` (base type: `bytea`) in database
      * - Nullable, no default
      */
    data_hash?: c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgHash32type | db.Parameter<c.PgHash32type> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **withdrawal**
   * - Table in database
   */
  export namespace withdrawal {
    export type Table = 'withdrawal';
    export interface Selectable {
      /**
      * **withdrawal.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('withdrawal_id_seq'::regclass)`
      */
    id: db.Int8String;
      /**
      * **withdrawal.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id: db.Int8String;
      /**
      * **withdrawal.amount**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    amount: c.PgLovelace;
      /**
      * **withdrawal.redeemer_id**
      * - `int8` in database
      * - Nullable, no default
      */
    redeemer_id: db.Int8String | null;
      /**
      * **withdrawal.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: db.Int8String;
    }
    export interface JSONSelectable {
      /**
      * **withdrawal.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('withdrawal_id_seq'::regclass)`
      */
    id: number;
      /**
      * **withdrawal.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id: number;
      /**
      * **withdrawal.amount**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    amount: c.PgLovelace;
      /**
      * **withdrawal.redeemer_id**
      * - `int8` in database
      * - Nullable, no default
      */
    redeemer_id: number | null;
      /**
      * **withdrawal.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: number;
    }
    export interface Whereable {
      /**
      * **withdrawal.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('withdrawal_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **withdrawal.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **withdrawal.amount**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    amount?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.ParentColumn>;
      /**
      * **withdrawal.redeemer_id**
      * - `int8` in database
      * - Nullable, no default
      */
    redeemer_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **withdrawal.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **withdrawal.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('withdrawal_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **withdrawal.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **withdrawal.amount**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    amount: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment;
      /**
      * **withdrawal.redeemer_id**
      * - `int8` in database
      * - Nullable, no default
      */
    redeemer_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **withdrawal.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **withdrawal.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('withdrawal_id_seq'::regclass)`
      */
    id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **withdrawal.addr_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    addr_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **withdrawal.amount**
      * - `lovelace` (base type: `numeric`) in database
      * - `NOT NULL`, no default
      */
    amount?: c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment | db.SQLFragment<any, c.PgLovelace | db.Parameter<c.PgLovelace> | db.SQLFragment>;
      /**
      * **withdrawal.redeemer_id**
      * - `int8` in database
      * - Nullable, no default
      */
    redeemer_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **withdrawal.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
    tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'unique_withdrawal' | 'withdrawal_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* --- aggregate types --- */

  export namespace public {  
    export type Table = ada_pots.Table | admin_user.Table | block.Table | collateral_tx_in.Table | cost_model.Table | datum.Table | delegation.Table | delisted_pool.Table | epoch.Table | epoch_param.Table | epoch_reward_total_received.Table | epoch_stake.Table | epoch_sync_time.Table | ma_tx_mint.Table | ma_tx_out.Table | meta.Table | multi_asset.Table | param_proposal.Table | pool_hash.Table | pool_metadata_ref.Table | pool_offline_data.Table | pool_offline_fetch_error.Table | pool_owner.Table | pool_relay.Table | pool_retire.Table | pool_update.Table | pot_transfer.Table | redeemer.Table | reserve.Table | reserved_pool_ticker.Table | reward.Table | schema_version.Table | script.Table | slot_leader.Table | stake_address.Table | stake_deregistration.Table | stake_registration.Table | treasury.Table | tx.Table | tx_in.Table | tx_metadata.Table | tx_out.Table | utxo_byron_view.Table | utxo_view.Table | withdrawal.Table;
    export type Selectable = ada_pots.Selectable | admin_user.Selectable | block.Selectable | collateral_tx_in.Selectable | cost_model.Selectable | datum.Selectable | delegation.Selectable | delisted_pool.Selectable | epoch.Selectable | epoch_param.Selectable | epoch_reward_total_received.Selectable | epoch_stake.Selectable | epoch_sync_time.Selectable | ma_tx_mint.Selectable | ma_tx_out.Selectable | meta.Selectable | multi_asset.Selectable | param_proposal.Selectable | pool_hash.Selectable | pool_metadata_ref.Selectable | pool_offline_data.Selectable | pool_offline_fetch_error.Selectable | pool_owner.Selectable | pool_relay.Selectable | pool_retire.Selectable | pool_update.Selectable | pot_transfer.Selectable | redeemer.Selectable | reserve.Selectable | reserved_pool_ticker.Selectable | reward.Selectable | schema_version.Selectable | script.Selectable | slot_leader.Selectable | stake_address.Selectable | stake_deregistration.Selectable | stake_registration.Selectable | treasury.Selectable | tx.Selectable | tx_in.Selectable | tx_metadata.Selectable | tx_out.Selectable | utxo_byron_view.Selectable | utxo_view.Selectable | withdrawal.Selectable;
    export type JSONSelectable = ada_pots.JSONSelectable | admin_user.JSONSelectable | block.JSONSelectable | collateral_tx_in.JSONSelectable | cost_model.JSONSelectable | datum.JSONSelectable | delegation.JSONSelectable | delisted_pool.JSONSelectable | epoch.JSONSelectable | epoch_param.JSONSelectable | epoch_reward_total_received.JSONSelectable | epoch_stake.JSONSelectable | epoch_sync_time.JSONSelectable | ma_tx_mint.JSONSelectable | ma_tx_out.JSONSelectable | meta.JSONSelectable | multi_asset.JSONSelectable | param_proposal.JSONSelectable | pool_hash.JSONSelectable | pool_metadata_ref.JSONSelectable | pool_offline_data.JSONSelectable | pool_offline_fetch_error.JSONSelectable | pool_owner.JSONSelectable | pool_relay.JSONSelectable | pool_retire.JSONSelectable | pool_update.JSONSelectable | pot_transfer.JSONSelectable | redeemer.JSONSelectable | reserve.JSONSelectable | reserved_pool_ticker.JSONSelectable | reward.JSONSelectable | schema_version.JSONSelectable | script.JSONSelectable | slot_leader.JSONSelectable | stake_address.JSONSelectable | stake_deregistration.JSONSelectable | stake_registration.JSONSelectable | treasury.JSONSelectable | tx.JSONSelectable | tx_in.JSONSelectable | tx_metadata.JSONSelectable | tx_out.JSONSelectable | utxo_byron_view.JSONSelectable | utxo_view.JSONSelectable | withdrawal.JSONSelectable;
    export type Whereable = ada_pots.Whereable | admin_user.Whereable | block.Whereable | collateral_tx_in.Whereable | cost_model.Whereable | datum.Whereable | delegation.Whereable | delisted_pool.Whereable | epoch.Whereable | epoch_param.Whereable | epoch_reward_total_received.Whereable | epoch_stake.Whereable | epoch_sync_time.Whereable | ma_tx_mint.Whereable | ma_tx_out.Whereable | meta.Whereable | multi_asset.Whereable | param_proposal.Whereable | pool_hash.Whereable | pool_metadata_ref.Whereable | pool_offline_data.Whereable | pool_offline_fetch_error.Whereable | pool_owner.Whereable | pool_relay.Whereable | pool_retire.Whereable | pool_update.Whereable | pot_transfer.Whereable | redeemer.Whereable | reserve.Whereable | reserved_pool_ticker.Whereable | reward.Whereable | schema_version.Whereable | script.Whereable | slot_leader.Whereable | stake_address.Whereable | stake_deregistration.Whereable | stake_registration.Whereable | treasury.Whereable | tx.Whereable | tx_in.Whereable | tx_metadata.Whereable | tx_out.Whereable | utxo_byron_view.Whereable | utxo_view.Whereable | withdrawal.Whereable;
    export type Insertable = ada_pots.Insertable | admin_user.Insertable | block.Insertable | collateral_tx_in.Insertable | cost_model.Insertable | datum.Insertable | delegation.Insertable | delisted_pool.Insertable | epoch.Insertable | epoch_param.Insertable | epoch_reward_total_received.Insertable | epoch_stake.Insertable | epoch_sync_time.Insertable | ma_tx_mint.Insertable | ma_tx_out.Insertable | meta.Insertable | multi_asset.Insertable | param_proposal.Insertable | pool_hash.Insertable | pool_metadata_ref.Insertable | pool_offline_data.Insertable | pool_offline_fetch_error.Insertable | pool_owner.Insertable | pool_relay.Insertable | pool_retire.Insertable | pool_update.Insertable | pot_transfer.Insertable | redeemer.Insertable | reserve.Insertable | reserved_pool_ticker.Insertable | reward.Insertable | schema_version.Insertable | script.Insertable | slot_leader.Insertable | stake_address.Insertable | stake_deregistration.Insertable | stake_registration.Insertable | treasury.Insertable | tx.Insertable | tx_in.Insertable | tx_metadata.Insertable | tx_out.Insertable | utxo_byron_view.Insertable | utxo_view.Insertable | withdrawal.Insertable;
    export type Updatable = ada_pots.Updatable | admin_user.Updatable | block.Updatable | collateral_tx_in.Updatable | cost_model.Updatable | datum.Updatable | delegation.Updatable | delisted_pool.Updatable | epoch.Updatable | epoch_param.Updatable | epoch_reward_total_received.Updatable | epoch_stake.Updatable | epoch_sync_time.Updatable | ma_tx_mint.Updatable | ma_tx_out.Updatable | meta.Updatable | multi_asset.Updatable | param_proposal.Updatable | pool_hash.Updatable | pool_metadata_ref.Updatable | pool_offline_data.Updatable | pool_offline_fetch_error.Updatable | pool_owner.Updatable | pool_relay.Updatable | pool_retire.Updatable | pool_update.Updatable | pot_transfer.Updatable | redeemer.Updatable | reserve.Updatable | reserved_pool_ticker.Updatable | reward.Updatable | schema_version.Updatable | script.Updatable | slot_leader.Updatable | stake_address.Updatable | stake_deregistration.Updatable | stake_registration.Updatable | treasury.Updatable | tx.Updatable | tx_in.Updatable | tx_metadata.Updatable | tx_out.Updatable | utxo_byron_view.Updatable | utxo_view.Updatable | withdrawal.Updatable;
    export type UniqueIndex = ada_pots.UniqueIndex | admin_user.UniqueIndex | block.UniqueIndex | collateral_tx_in.UniqueIndex | cost_model.UniqueIndex | datum.UniqueIndex | delegation.UniqueIndex | delisted_pool.UniqueIndex | epoch.UniqueIndex | epoch_param.UniqueIndex | epoch_reward_total_received.UniqueIndex | epoch_stake.UniqueIndex | epoch_sync_time.UniqueIndex | ma_tx_mint.UniqueIndex | ma_tx_out.UniqueIndex | meta.UniqueIndex | multi_asset.UniqueIndex | param_proposal.UniqueIndex | pool_hash.UniqueIndex | pool_metadata_ref.UniqueIndex | pool_offline_data.UniqueIndex | pool_offline_fetch_error.UniqueIndex | pool_owner.UniqueIndex | pool_relay.UniqueIndex | pool_retire.UniqueIndex | pool_update.UniqueIndex | pot_transfer.UniqueIndex | redeemer.UniqueIndex | reserve.UniqueIndex | reserved_pool_ticker.UniqueIndex | reward.UniqueIndex | schema_version.UniqueIndex | script.UniqueIndex | slot_leader.UniqueIndex | stake_address.UniqueIndex | stake_deregistration.UniqueIndex | stake_registration.UniqueIndex | treasury.UniqueIndex | tx.UniqueIndex | tx_in.UniqueIndex | tx_metadata.UniqueIndex | tx_out.UniqueIndex | utxo_byron_view.UniqueIndex | utxo_view.UniqueIndex | withdrawal.UniqueIndex;
    export type Column = ada_pots.Column | admin_user.Column | block.Column | collateral_tx_in.Column | cost_model.Column | datum.Column | delegation.Column | delisted_pool.Column | epoch.Column | epoch_param.Column | epoch_reward_total_received.Column | epoch_stake.Column | epoch_sync_time.Column | ma_tx_mint.Column | ma_tx_out.Column | meta.Column | multi_asset.Column | param_proposal.Column | pool_hash.Column | pool_metadata_ref.Column | pool_offline_data.Column | pool_offline_fetch_error.Column | pool_owner.Column | pool_relay.Column | pool_retire.Column | pool_update.Column | pot_transfer.Column | redeemer.Column | reserve.Column | reserved_pool_ticker.Column | reward.Column | schema_version.Column | script.Column | slot_leader.Column | stake_address.Column | stake_deregistration.Column | stake_registration.Column | treasury.Column | tx.Column | tx_in.Column | tx_metadata.Column | tx_out.Column | utxo_byron_view.Column | utxo_view.Column | withdrawal.Column;
  
    export type AllBaseTables = [ada_pots.Table, admin_user.Table, block.Table, collateral_tx_in.Table, cost_model.Table, datum.Table, delegation.Table, delisted_pool.Table, epoch.Table, epoch_param.Table, epoch_reward_total_received.Table, epoch_stake.Table, epoch_sync_time.Table, ma_tx_mint.Table, ma_tx_out.Table, meta.Table, multi_asset.Table, param_proposal.Table, pool_hash.Table, pool_metadata_ref.Table, pool_offline_data.Table, pool_offline_fetch_error.Table, pool_owner.Table, pool_relay.Table, pool_retire.Table, pool_update.Table, pot_transfer.Table, redeemer.Table, reserve.Table, reserved_pool_ticker.Table, reward.Table, schema_version.Table, script.Table, slot_leader.Table, stake_address.Table, stake_deregistration.Table, stake_registration.Table, treasury.Table, tx.Table, tx_in.Table, tx_metadata.Table, tx_out.Table, withdrawal.Table];
    export type AllForeignTables = [];
    export type AllViews = [utxo_byron_view.Table, utxo_view.Table];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [ada_pots.Table, admin_user.Table, block.Table, collateral_tx_in.Table, cost_model.Table, datum.Table, delegation.Table, delisted_pool.Table, epoch.Table, epoch_param.Table, epoch_reward_total_received.Table, epoch_stake.Table, epoch_sync_time.Table, ma_tx_mint.Table, ma_tx_out.Table, meta.Table, multi_asset.Table, param_proposal.Table, pool_hash.Table, pool_metadata_ref.Table, pool_offline_data.Table, pool_offline_fetch_error.Table, pool_owner.Table, pool_relay.Table, pool_retire.Table, pool_update.Table, pot_transfer.Table, redeemer.Table, reserve.Table, reserved_pool_ticker.Table, reward.Table, schema_version.Table, script.Table, slot_leader.Table, stake_address.Table, stake_deregistration.Table, stake_registration.Table, treasury.Table, tx.Table, tx_in.Table, tx_metadata.Table, tx_out.Table, utxo_byron_view.Table, utxo_view.Table, withdrawal.Table];
  }



  /* === global aggregate types === */

  export type Schema = 'public';
  export type Table = public.Table;
  export type Selectable = public.Selectable;
  export type JSONSelectable = public.JSONSelectable;
  export type Whereable = public.Whereable;
  export type Insertable = public.Insertable;
  export type Updatable = public.Updatable;
  export type UniqueIndex = public.UniqueIndex;
  export type Column = public.Column;

  export type AllSchemas = ['public'];
  export type AllBaseTables = [...public.AllBaseTables];
  export type AllForeignTables = [...public.AllForeignTables];
  export type AllViews = [...public.AllViews];
  export type AllMaterializedViews = [...public.AllMaterializedViews];
  export type AllTablesAndViews = [...public.AllTablesAndViews];


  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    "ada_pots": ada_pots.Selectable;
    "admin_user": admin_user.Selectable;
    "block": block.Selectable;
    "collateral_tx_in": collateral_tx_in.Selectable;
    "cost_model": cost_model.Selectable;
    "datum": datum.Selectable;
    "delegation": delegation.Selectable;
    "delisted_pool": delisted_pool.Selectable;
    "epoch": epoch.Selectable;
    "epoch_param": epoch_param.Selectable;
    "epoch_reward_total_received": epoch_reward_total_received.Selectable;
    "epoch_stake": epoch_stake.Selectable;
    "epoch_sync_time": epoch_sync_time.Selectable;
    "ma_tx_mint": ma_tx_mint.Selectable;
    "ma_tx_out": ma_tx_out.Selectable;
    "meta": meta.Selectable;
    "multi_asset": multi_asset.Selectable;
    "param_proposal": param_proposal.Selectable;
    "pool_hash": pool_hash.Selectable;
    "pool_metadata_ref": pool_metadata_ref.Selectable;
    "pool_offline_data": pool_offline_data.Selectable;
    "pool_offline_fetch_error": pool_offline_fetch_error.Selectable;
    "pool_owner": pool_owner.Selectable;
    "pool_relay": pool_relay.Selectable;
    "pool_retire": pool_retire.Selectable;
    "pool_update": pool_update.Selectable;
    "pot_transfer": pot_transfer.Selectable;
    "redeemer": redeemer.Selectable;
    "reserve": reserve.Selectable;
    "reserved_pool_ticker": reserved_pool_ticker.Selectable;
    "reward": reward.Selectable;
    "schema_version": schema_version.Selectable;
    "script": script.Selectable;
    "slot_leader": slot_leader.Selectable;
    "stake_address": stake_address.Selectable;
    "stake_deregistration": stake_deregistration.Selectable;
    "stake_registration": stake_registration.Selectable;
    "treasury": treasury.Selectable;
    "tx": tx.Selectable;
    "tx_in": tx_in.Selectable;
    "tx_metadata": tx_metadata.Selectable;
    "tx_out": tx_out.Selectable;
    "utxo_byron_view": utxo_byron_view.Selectable;
    "utxo_view": utxo_view.Selectable;
    "withdrawal": withdrawal.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    "ada_pots": ada_pots.JSONSelectable;
    "admin_user": admin_user.JSONSelectable;
    "block": block.JSONSelectable;
    "collateral_tx_in": collateral_tx_in.JSONSelectable;
    "cost_model": cost_model.JSONSelectable;
    "datum": datum.JSONSelectable;
    "delegation": delegation.JSONSelectable;
    "delisted_pool": delisted_pool.JSONSelectable;
    "epoch": epoch.JSONSelectable;
    "epoch_param": epoch_param.JSONSelectable;
    "epoch_reward_total_received": epoch_reward_total_received.JSONSelectable;
    "epoch_stake": epoch_stake.JSONSelectable;
    "epoch_sync_time": epoch_sync_time.JSONSelectable;
    "ma_tx_mint": ma_tx_mint.JSONSelectable;
    "ma_tx_out": ma_tx_out.JSONSelectable;
    "meta": meta.JSONSelectable;
    "multi_asset": multi_asset.JSONSelectable;
    "param_proposal": param_proposal.JSONSelectable;
    "pool_hash": pool_hash.JSONSelectable;
    "pool_metadata_ref": pool_metadata_ref.JSONSelectable;
    "pool_offline_data": pool_offline_data.JSONSelectable;
    "pool_offline_fetch_error": pool_offline_fetch_error.JSONSelectable;
    "pool_owner": pool_owner.JSONSelectable;
    "pool_relay": pool_relay.JSONSelectable;
    "pool_retire": pool_retire.JSONSelectable;
    "pool_update": pool_update.JSONSelectable;
    "pot_transfer": pot_transfer.JSONSelectable;
    "redeemer": redeemer.JSONSelectable;
    "reserve": reserve.JSONSelectable;
    "reserved_pool_ticker": reserved_pool_ticker.JSONSelectable;
    "reward": reward.JSONSelectable;
    "schema_version": schema_version.JSONSelectable;
    "script": script.JSONSelectable;
    "slot_leader": slot_leader.JSONSelectable;
    "stake_address": stake_address.JSONSelectable;
    "stake_deregistration": stake_deregistration.JSONSelectable;
    "stake_registration": stake_registration.JSONSelectable;
    "treasury": treasury.JSONSelectable;
    "tx": tx.JSONSelectable;
    "tx_in": tx_in.JSONSelectable;
    "tx_metadata": tx_metadata.JSONSelectable;
    "tx_out": tx_out.JSONSelectable;
    "utxo_byron_view": utxo_byron_view.JSONSelectable;
    "utxo_view": utxo_view.JSONSelectable;
    "withdrawal": withdrawal.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    "ada_pots": ada_pots.Whereable;
    "admin_user": admin_user.Whereable;
    "block": block.Whereable;
    "collateral_tx_in": collateral_tx_in.Whereable;
    "cost_model": cost_model.Whereable;
    "datum": datum.Whereable;
    "delegation": delegation.Whereable;
    "delisted_pool": delisted_pool.Whereable;
    "epoch": epoch.Whereable;
    "epoch_param": epoch_param.Whereable;
    "epoch_reward_total_received": epoch_reward_total_received.Whereable;
    "epoch_stake": epoch_stake.Whereable;
    "epoch_sync_time": epoch_sync_time.Whereable;
    "ma_tx_mint": ma_tx_mint.Whereable;
    "ma_tx_out": ma_tx_out.Whereable;
    "meta": meta.Whereable;
    "multi_asset": multi_asset.Whereable;
    "param_proposal": param_proposal.Whereable;
    "pool_hash": pool_hash.Whereable;
    "pool_metadata_ref": pool_metadata_ref.Whereable;
    "pool_offline_data": pool_offline_data.Whereable;
    "pool_offline_fetch_error": pool_offline_fetch_error.Whereable;
    "pool_owner": pool_owner.Whereable;
    "pool_relay": pool_relay.Whereable;
    "pool_retire": pool_retire.Whereable;
    "pool_update": pool_update.Whereable;
    "pot_transfer": pot_transfer.Whereable;
    "redeemer": redeemer.Whereable;
    "reserve": reserve.Whereable;
    "reserved_pool_ticker": reserved_pool_ticker.Whereable;
    "reward": reward.Whereable;
    "schema_version": schema_version.Whereable;
    "script": script.Whereable;
    "slot_leader": slot_leader.Whereable;
    "stake_address": stake_address.Whereable;
    "stake_deregistration": stake_deregistration.Whereable;
    "stake_registration": stake_registration.Whereable;
    "treasury": treasury.Whereable;
    "tx": tx.Whereable;
    "tx_in": tx_in.Whereable;
    "tx_metadata": tx_metadata.Whereable;
    "tx_out": tx_out.Whereable;
    "utxo_byron_view": utxo_byron_view.Whereable;
    "utxo_view": utxo_view.Whereable;
    "withdrawal": withdrawal.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    "ada_pots": ada_pots.Insertable;
    "admin_user": admin_user.Insertable;
    "block": block.Insertable;
    "collateral_tx_in": collateral_tx_in.Insertable;
    "cost_model": cost_model.Insertable;
    "datum": datum.Insertable;
    "delegation": delegation.Insertable;
    "delisted_pool": delisted_pool.Insertable;
    "epoch": epoch.Insertable;
    "epoch_param": epoch_param.Insertable;
    "epoch_reward_total_received": epoch_reward_total_received.Insertable;
    "epoch_stake": epoch_stake.Insertable;
    "epoch_sync_time": epoch_sync_time.Insertable;
    "ma_tx_mint": ma_tx_mint.Insertable;
    "ma_tx_out": ma_tx_out.Insertable;
    "meta": meta.Insertable;
    "multi_asset": multi_asset.Insertable;
    "param_proposal": param_proposal.Insertable;
    "pool_hash": pool_hash.Insertable;
    "pool_metadata_ref": pool_metadata_ref.Insertable;
    "pool_offline_data": pool_offline_data.Insertable;
    "pool_offline_fetch_error": pool_offline_fetch_error.Insertable;
    "pool_owner": pool_owner.Insertable;
    "pool_relay": pool_relay.Insertable;
    "pool_retire": pool_retire.Insertable;
    "pool_update": pool_update.Insertable;
    "pot_transfer": pot_transfer.Insertable;
    "redeemer": redeemer.Insertable;
    "reserve": reserve.Insertable;
    "reserved_pool_ticker": reserved_pool_ticker.Insertable;
    "reward": reward.Insertable;
    "schema_version": schema_version.Insertable;
    "script": script.Insertable;
    "slot_leader": slot_leader.Insertable;
    "stake_address": stake_address.Insertable;
    "stake_deregistration": stake_deregistration.Insertable;
    "stake_registration": stake_registration.Insertable;
    "treasury": treasury.Insertable;
    "tx": tx.Insertable;
    "tx_in": tx_in.Insertable;
    "tx_metadata": tx_metadata.Insertable;
    "tx_out": tx_out.Insertable;
    "utxo_byron_view": utxo_byron_view.Insertable;
    "utxo_view": utxo_view.Insertable;
    "withdrawal": withdrawal.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    "ada_pots": ada_pots.Updatable;
    "admin_user": admin_user.Updatable;
    "block": block.Updatable;
    "collateral_tx_in": collateral_tx_in.Updatable;
    "cost_model": cost_model.Updatable;
    "datum": datum.Updatable;
    "delegation": delegation.Updatable;
    "delisted_pool": delisted_pool.Updatable;
    "epoch": epoch.Updatable;
    "epoch_param": epoch_param.Updatable;
    "epoch_reward_total_received": epoch_reward_total_received.Updatable;
    "epoch_stake": epoch_stake.Updatable;
    "epoch_sync_time": epoch_sync_time.Updatable;
    "ma_tx_mint": ma_tx_mint.Updatable;
    "ma_tx_out": ma_tx_out.Updatable;
    "meta": meta.Updatable;
    "multi_asset": multi_asset.Updatable;
    "param_proposal": param_proposal.Updatable;
    "pool_hash": pool_hash.Updatable;
    "pool_metadata_ref": pool_metadata_ref.Updatable;
    "pool_offline_data": pool_offline_data.Updatable;
    "pool_offline_fetch_error": pool_offline_fetch_error.Updatable;
    "pool_owner": pool_owner.Updatable;
    "pool_relay": pool_relay.Updatable;
    "pool_retire": pool_retire.Updatable;
    "pool_update": pool_update.Updatable;
    "pot_transfer": pot_transfer.Updatable;
    "redeemer": redeemer.Updatable;
    "reserve": reserve.Updatable;
    "reserved_pool_ticker": reserved_pool_ticker.Updatable;
    "reward": reward.Updatable;
    "schema_version": schema_version.Updatable;
    "script": script.Updatable;
    "slot_leader": slot_leader.Updatable;
    "stake_address": stake_address.Updatable;
    "stake_deregistration": stake_deregistration.Updatable;
    "stake_registration": stake_registration.Updatable;
    "treasury": treasury.Updatable;
    "tx": tx.Updatable;
    "tx_in": tx_in.Updatable;
    "tx_metadata": tx_metadata.Updatable;
    "tx_out": tx_out.Updatable;
    "utxo_byron_view": utxo_byron_view.Updatable;
    "utxo_view": utxo_view.Updatable;
    "withdrawal": withdrawal.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    "ada_pots": ada_pots.UniqueIndex;
    "admin_user": admin_user.UniqueIndex;
    "block": block.UniqueIndex;
    "collateral_tx_in": collateral_tx_in.UniqueIndex;
    "cost_model": cost_model.UniqueIndex;
    "datum": datum.UniqueIndex;
    "delegation": delegation.UniqueIndex;
    "delisted_pool": delisted_pool.UniqueIndex;
    "epoch": epoch.UniqueIndex;
    "epoch_param": epoch_param.UniqueIndex;
    "epoch_reward_total_received": epoch_reward_total_received.UniqueIndex;
    "epoch_stake": epoch_stake.UniqueIndex;
    "epoch_sync_time": epoch_sync_time.UniqueIndex;
    "ma_tx_mint": ma_tx_mint.UniqueIndex;
    "ma_tx_out": ma_tx_out.UniqueIndex;
    "meta": meta.UniqueIndex;
    "multi_asset": multi_asset.UniqueIndex;
    "param_proposal": param_proposal.UniqueIndex;
    "pool_hash": pool_hash.UniqueIndex;
    "pool_metadata_ref": pool_metadata_ref.UniqueIndex;
    "pool_offline_data": pool_offline_data.UniqueIndex;
    "pool_offline_fetch_error": pool_offline_fetch_error.UniqueIndex;
    "pool_owner": pool_owner.UniqueIndex;
    "pool_relay": pool_relay.UniqueIndex;
    "pool_retire": pool_retire.UniqueIndex;
    "pool_update": pool_update.UniqueIndex;
    "pot_transfer": pot_transfer.UniqueIndex;
    "redeemer": redeemer.UniqueIndex;
    "reserve": reserve.UniqueIndex;
    "reserved_pool_ticker": reserved_pool_ticker.UniqueIndex;
    "reward": reward.UniqueIndex;
    "schema_version": schema_version.UniqueIndex;
    "script": script.UniqueIndex;
    "slot_leader": slot_leader.UniqueIndex;
    "stake_address": stake_address.UniqueIndex;
    "stake_deregistration": stake_deregistration.UniqueIndex;
    "stake_registration": stake_registration.UniqueIndex;
    "treasury": treasury.UniqueIndex;
    "tx": tx.UniqueIndex;
    "tx_in": tx_in.UniqueIndex;
    "tx_metadata": tx_metadata.UniqueIndex;
    "tx_out": tx_out.UniqueIndex;
    "utxo_byron_view": utxo_byron_view.UniqueIndex;
    "utxo_view": utxo_view.UniqueIndex;
    "withdrawal": withdrawal.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    "ada_pots": ada_pots.Column;
    "admin_user": admin_user.Column;
    "block": block.Column;
    "collateral_tx_in": collateral_tx_in.Column;
    "cost_model": cost_model.Column;
    "datum": datum.Column;
    "delegation": delegation.Column;
    "delisted_pool": delisted_pool.Column;
    "epoch": epoch.Column;
    "epoch_param": epoch_param.Column;
    "epoch_reward_total_received": epoch_reward_total_received.Column;
    "epoch_stake": epoch_stake.Column;
    "epoch_sync_time": epoch_sync_time.Column;
    "ma_tx_mint": ma_tx_mint.Column;
    "ma_tx_out": ma_tx_out.Column;
    "meta": meta.Column;
    "multi_asset": multi_asset.Column;
    "param_proposal": param_proposal.Column;
    "pool_hash": pool_hash.Column;
    "pool_metadata_ref": pool_metadata_ref.Column;
    "pool_offline_data": pool_offline_data.Column;
    "pool_offline_fetch_error": pool_offline_fetch_error.Column;
    "pool_owner": pool_owner.Column;
    "pool_relay": pool_relay.Column;
    "pool_retire": pool_retire.Column;
    "pool_update": pool_update.Column;
    "pot_transfer": pot_transfer.Column;
    "redeemer": redeemer.Column;
    "reserve": reserve.Column;
    "reserved_pool_ticker": reserved_pool_ticker.Column;
    "reward": reward.Column;
    "schema_version": schema_version.Column;
    "script": script.Column;
    "slot_leader": slot_leader.Column;
    "stake_address": stake_address.Column;
    "stake_deregistration": stake_deregistration.Column;
    "stake_registration": stake_registration.Column;
    "treasury": treasury.Column;
    "tx": tx.Column;
    "tx_in": tx_in.Column;
    "tx_metadata": tx_metadata.Column;
    "tx_out": tx_out.Column;
    "utxo_byron_view": utxo_byron_view.Column;
    "utxo_view": utxo_view.Column;
    "withdrawal": withdrawal.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    "ada_pots": ada_pots.SQL;
    "admin_user": admin_user.SQL;
    "block": block.SQL;
    "collateral_tx_in": collateral_tx_in.SQL;
    "cost_model": cost_model.SQL;
    "datum": datum.SQL;
    "delegation": delegation.SQL;
    "delisted_pool": delisted_pool.SQL;
    "epoch": epoch.SQL;
    "epoch_param": epoch_param.SQL;
    "epoch_reward_total_received": epoch_reward_total_received.SQL;
    "epoch_stake": epoch_stake.SQL;
    "epoch_sync_time": epoch_sync_time.SQL;
    "ma_tx_mint": ma_tx_mint.SQL;
    "ma_tx_out": ma_tx_out.SQL;
    "meta": meta.SQL;
    "multi_asset": multi_asset.SQL;
    "param_proposal": param_proposal.SQL;
    "pool_hash": pool_hash.SQL;
    "pool_metadata_ref": pool_metadata_ref.SQL;
    "pool_offline_data": pool_offline_data.SQL;
    "pool_offline_fetch_error": pool_offline_fetch_error.SQL;
    "pool_owner": pool_owner.SQL;
    "pool_relay": pool_relay.SQL;
    "pool_retire": pool_retire.SQL;
    "pool_update": pool_update.SQL;
    "pot_transfer": pot_transfer.SQL;
    "redeemer": redeemer.SQL;
    "reserve": reserve.SQL;
    "reserved_pool_ticker": reserved_pool_ticker.SQL;
    "reward": reward.SQL;
    "schema_version": schema_version.SQL;
    "script": script.SQL;
    "slot_leader": slot_leader.SQL;
    "stake_address": stake_address.SQL;
    "stake_deregistration": stake_deregistration.SQL;
    "stake_registration": stake_registration.SQL;
    "treasury": treasury.SQL;
    "tx": tx.SQL;
    "tx_in": tx_in.SQL;
    "tx_metadata": tx_metadata.SQL;
    "tx_out": tx_out.SQL;
    "utxo_byron_view": utxo_byron_view.SQL;
    "utxo_view": utxo_view.SQL;
    "withdrawal": withdrawal.SQL;
  }[T];

}
